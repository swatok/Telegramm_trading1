"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
"""

import os
import json
import asyncio
import aiohttp
import logging
from decimal import Decimal
from loguru import logger
from datetime import datetime
from typing import Dict, List, Optional
from contextlib import contextmanager
from solders.keypair import Keypair
import base58
import ssl
import time
import uuid

from api.jupiter import JupiterAPI
from api.quicknode import QuicknodeAPI
from model.transaction import Transaction
from model.quote import Quote
from model.position import Position
from model.wallet_activity import WalletActivity
from model.bot_session import BotSession
from model.trade_stats import TradeStats
from database import Database
from wallet import Wallet

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
WSOL_ADDRESS = "So11111111111111111111111111111111111111112"
MIN_SOL_BALANCE = Decimal("0.02")  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å SOL –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π
TRANSACTION_CONFIRMATION_TIMEOUT = 60  # –¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# Take-profit —Ä—ñ–≤–Ω—ñ
TAKE_PROFIT_LEVELS = [
    {"level": Decimal("1"), "sell_percent": Decimal("20")},   # 100% - –ø—Ä–æ–¥–∞–∂ 20%
    {"level": Decimal("2.5"), "sell_percent": Decimal("20")}, # 250% - –ø—Ä–æ–¥–∞–∂ 20%
    {"level": Decimal("5"), "sell_percent": Decimal("20")},   # 500% - –ø—Ä–æ–¥–∞–∂ 20%
    {"level": Decimal("10"), "sell_percent": Decimal("20")},  # 1000% - –ø—Ä–æ–¥–∞–∂ 20%
    {"level": Decimal("30"), "sell_percent": Decimal("25")},  # 3000% - –ø—Ä–æ–¥–∞–∂ 25%
    {"level": Decimal("90"), "sell_percent": Decimal("50")}   # 9000% - –ø—Ä–æ–¥–∞–∂ 50%
]

# Stop-loss —Ä—ñ–≤–µ–Ω—å
STOP_LOSS_LEVEL = Decimal("-0.75")  # -75%

class TradingExecutor:
    def __init__(self, db: Database, send_log_callback, ssl_context=None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è"""
        self.db = db
        self.send_log = send_log_callback
        self.ssl_context = ssl_context
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ API –∫–ª—ñ—î–Ω—Ç–∏
        self.quicknode = QuicknodeAPI(ssl_context=ssl_context)
        self.jupiter = JupiterAPI(ssl_context=ssl_context)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å
        if not os.getenv('SOLANA_PRIVATE_KEY'):
            raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ SOLANA_PRIVATE_KEY")
            
        self.wallet = Wallet()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ ID —Å–µ—Å—ñ—ó
        self.current_session_id = str(uuid.uuid4())
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Å—ñ—é aiohttp
        self.session = None
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        self.performance_metrics = {
            'api_calls': 0,
            'successful_trades': 0,
            'failed_trades': 0,
            'average_response_time': 0.0
        }
        
    async def __aenter__(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        if self.session:
            await self.session.close()
            
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
            balance = await self.get_balance()
            logger.info(f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å SOL: {balance}")
            await self.send_log(f"üîÑ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {balance:.4f} SOL")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
            self.initial_balance = balance
            self.current_balance = balance
            
            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–ø—É—â–µ–Ω–∏–π
            self.is_running = True
            
            logger.info("–¢–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–ø—É—â–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è: {e}")
            raise
            
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è"""
        try:
            self.is_running = False
            if self.session:
                await self.session.close()
            logger.info("–¢–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è: {e}")
            
    async def verify_token(self, token_address: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–µ–∑ QuickNode
            token_info = await self.quicknode.get_token_info(token_address)
            if not token_info:
                logger.error(f"–¢–æ–∫–µ–Ω {token_address} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ QuickNode")
                return False
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ç–æ—Ä–≥—ñ–≤–ª—ñ —á–µ—Ä–µ–∑ Jupiter
            try:
                price = await self.jupiter.get_price(token_address)
                if not price:
                    logger.error(f"–¢–æ–∫–µ–Ω {token_address} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –≤ Jupiter")
                    return False
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ Jupiter: {e}")
                return False
                
            logger.info(f"–¢–æ–∫–µ–Ω {token_address} —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
            
    async def get_balance(self) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å SOL
            sol_balance = await self.quicknode.get_sol_balance()
            if sol_balance is None:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞ÔøΩÔøΩ—Å SOL")
                return None
                
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–∫–µ–Ω-–∞–∫–∞—É–Ω—Ç–∏
            token_accounts = await self.quicknode.get_token_accounts()
            tokens = []
            total_value_sol = Decimal(str(sol_balance))  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Decimal –¥–ª—è —Ç–æ—á–Ω–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
            
            if token_accounts:
                for account in token_accounts:
                    try:
                        token_address = account.get('mint')
                        if not token_address or token_address == WSOL_ADDRESS:
                            continue
                            
                        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å —ñ decimals
                        raw_amount = Decimal(str(account.get('amount', '0')))
                        decimals = int(account.get('decimals', 9))
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –±–∞–ª–∞–Ω—Å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º decimals
                        token_balance = raw_amount / Decimal(str(10 ** decimals))
                        
                        if token_balance <= 0:
                            continue
                            
                        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω
                        token_info = await self.jupiter.get_token_info(token_address)
                        if not token_info:
                            continue
                            
                        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –≤ SOL
                        price_in_sol = await self.jupiter.get_price(token_address, WSOL_ADDRESS)
                        if not price_in_sol:
                            continue
                            
                        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤ SOL
                        price_decimal = Decimal(str(price_in_sol))
                        value_in_sol = token_balance * price_decimal
                        total_value_sol += value_in_sol
                        
                        tokens.append({
                            "address": token_address,
                            "symbol": token_info.get("symbol", "Unknown"),
                            "name": token_info.get("name", "Unknown Token"),
                            "balance": float(token_balance),
                            "price_sol": float(price_decimal),
                            "value_sol": float(value_in_sol)
                        })
                            
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–æ–∫–µ–Ω—É {token_address}: {str(e)}")
                        continue
                        
            return {
                "sol_balance": float(sol_balance),
                "total_value_sol": float(total_value_sol),
                "tokens": tokens
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {str(e)}")
            return None
            
    async def handle_trade_signal(self, signal: Dict) -> bool:
        """–û–±—Ä–æ–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É"""
        try:
            logger.info(f"–ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —Å–∏–≥–Ω–∞–ª—É: {signal}")
            await self.send_log("üîÑ –û–±—Ä–æ–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
            balance = await self.get_balance()
            logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance}")
            
            if not balance:
                await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å")
                return False
                
            if balance.get('sol_balance', 0) < MIN_SOL_BALANCE:
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SOL –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ. –ë–∞–ª–∞–Ω—Å: {balance.get('sol_balance', 0)}")
                await self.send_log(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SOL –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ: {balance.get('sol_balance', 0)}")
                return False
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
            token_address = signal.get('token_address')
            if not token_address:
                logger.error("–í—ñ–¥—Å—É—Ç–Ω—è –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–∏–≥–Ω–∞–ª—ñ")
                await self.send_log("‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–∏–≥–Ω–∞–ª—ñ")
                return False
                
            logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω {token_address}")
            
            try:
                # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ QuickNode
                token_info = await self.quicknode.get_token_info(token_address)
                if not token_info:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω {token_address} —á–µ—Ä–µ–∑ QuickNode")
                    await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω")
                    return False
                    
                logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω: {token_info}")
                
                # –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–±–∏–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –∑ –º–∞–ª–æ—é —Å—É–º–æ—é
                logger.info("–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è...")
                
                # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —Å–ø—Ä–æ–±
                test_params = [
                    {"amount": 100000, "slippage": 10.0},  # 0.0001 SOL, 10% slippage
                    {"amount": 500000, "slippage": 15.0},  # 0.0005 SOL, 15% slippage
                    {"amount": 1000000, "slippage": 20.0}, # 0.001 SOL, 20% slippage
                ]
                
                test_quote = None
                for params in test_params:
                    try:
                        logger.info(f"–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
                        test_quote = await self.jupiter.get_quote(
                            input_mint=WSOL_ADDRESS,
                            amount=params["amount"],
                            output_mint=token_address,
                            slippage=params["slippage"]
                        )
                        
                        if test_quote:
                            logger.info(f"–¢–µ—Å—Ç–æ–≤–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
                            await self.send_log(f"‚úÖ –¢–µ—Å—Ç–æ–≤–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ (amount={params['amount']/1e9} SOL, slippage={params['slippage']}%)")
                            break
                        else:
                            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
                            
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}: {str(e)}")
                        continue
                
                if test_quote:
                    logger.info(f"–¢–µ—Å—Ç–æ–≤–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ: {test_quote}")
                    
                    # –¢–µ–ø–µ—Ä –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è
                    logger.info("–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è...")
                    
                    # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è
                    real_params = [
                        {"amount": 1000000, "slippage": 5.0},   # 0.001 SOL, 5% slippage
                        {"amount": 2000000, "slippage": 7.5},   # 0.002 SOL, 7.5% slippage
                        {"amount": 3000000, "slippage": 10.0},  # 0.003 SOL, 10% slippage
                    ]
                    
                    quote = None
                    for params in real_params:
                        try:
                            logger.info(f"–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
                            quote = await self.jupiter.get_quote(
                                input_mint=WSOL_ADDRESS,
                                amount=params["amount"],
                                output_mint=token_address,
                                slippage=params["slippage"]
                            )
                            
                            if quote:
                                logger.info(f"–†–µ–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
                                await self.send_log(f"‚úÖ –†–µ–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ (amount={params['amount']/1e9} SOL, slippage={params['slippage']}%)")
                                break
                            else:
                                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
                                
                        except Exception as e:
                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}: {str(e)}")
                            continue
                    
                    if quote:
                        logger.info(f"–†–µ–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ: {quote}")
                        # –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—ñ —Ä–æ—É—Ç–∏–Ω–≥—É
                        if quote.get("routePlan"):
                            routes = quote.get("routePlan", [])
                            route_info = "\n".join([f"‚Ä¢ {route.get('swapInfo', {}).get('label', 'Unknown')}" for route in routes])
                            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ—É—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ:\n{route_info}")
                            await self.send_log(f"üìç –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ—É—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ:\n{route_info}")
                    else:
                        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –∑ –∂–æ–¥–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
                        await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è")
                        return False
                else:
                    logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–æ–¥–Ω–µ —Ç–µ—Å—Ç–æ–≤–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è")
                    await self.send_log("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ —á–µ—Ä–µ–∑ Jupiter")
                    return False
                    
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è: {str(e)}")
                await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è: {str(e)}")
                return False
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞
            token_price = await self.jupiter.get_price(token_address)
            if not token_price:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞ {token_address}")
                await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞")
                return False
                
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞: {token_price}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü—ñ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤–∞–º
            expected_price = signal.get('price', 2)  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –æ—á—ñ–∫—É—î–º–æ —Ü—ñ–Ω—É 2
            price_diff = abs(token_price - expected_price) / expected_price
            logger.info(f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {token_price}, –û—á—ñ–∫—É–≤–∞–Ω–∞ —Ü—ñ–Ω–∞: {expected_price}, –†—ñ–∑–Ω–∏—Ü—è: {price_diff*100}%")
            if price_diff > 0.1:  # –î–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è 10%
                logger.error(f"–¶—ñ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ {token_price} –∑–Ω–∞—á–Ω–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó {expected_price}")
                await self.send_log(f"‚ùå –¶—ñ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ {token_price} –∑–Ω–∞—á–Ω–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó {expected_price}")
                return False
                
            logger.info(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–∫–µ–Ω: {token_info}")
            await self.send_log(f"‚ÑπÔ∏è –¢–æ–∫–µ–Ω: {token_info.get('name', 'Unknown')} ({token_info.get('symbol', 'Unknown')})")
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            settings = self.db.get_settings()
            position_size = float(settings.get('position_size', 5)) / 100  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5%
            amount = int(float(balance['sol_balance']) * 1e9 * position_size)
            
            logger.info(f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Å—É–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {amount/1e9} SOL ({position_size*100}% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)")
            await self.send_log(f"üí± –°—É–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {amount/1e9:.4f} SOL")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è
            try:
                logger.info("–û—Ç—Ä–∏–º—É—î–º–æ —ÑÔøΩÔøΩ–Ω–∞–ª—å–Ω–µ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏...")
                quote = await self.jupiter.get_quote(
                    input_mint=WSOL_ADDRESS,
                    amount=amount,
                    slippage=float(settings.get('max_slippage', 1)),  # Slippage –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                    output_mint=token_address
                )
                
                if quote:
                    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è: {quote}")
                else:
                    logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                    await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                    return False
                    
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {e}")
                await self.send_log("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                return False
                
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            try:
                transaction = await self.jupiter.get_swap_transaction(quote)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")
                await self.send_log("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó")
                return False
                
            if not transaction:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é")
                await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é")
                return False
                
            logger.info("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞, –≤–∏–∫–æ–Ω—É—î–º–æ –ø—ñ–¥–ø–∏—Å —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É")
            await self.send_log("üìù –ü—ñ–¥–ø–∏—Å—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é...")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            signature = await self.execute_transaction_with_retry(
                transaction=transaction,
                required_sol=Decimal(str(amount / 1e9))
            )
            
            if not signature:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é")
                await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é")
                return False
                
            logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ: {signature}")
            await self.send_log(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ: {signature}")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
            position_data = {
                'token_address': token_address,
                'token_symbol': token_info.get('symbol', 'Unknown'),
                'token_name': token_info.get('name', 'Unknown'),
                'entry_price': float(quote['price']),
                'amount': float(quote['outAmount']) / 1e9,
                'remaining_amount': float(quote['outAmount']) / 1e9,
                'transaction_signature': signature,
                'status': 'active',
                'created_at': datetime.now(),
                'updated_at': datetime.now(),
                'tp_1_hit': False,
                'tp_2_hit': False,
                'tp_3_hit': False,
                'initial_value_sol': float(amount) / 1e9
            }
            
            try:
                position_id = self.db.add_position(position_data)
                logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é: {position_id}")
                await self.send_log(
                    f"üìà –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é #{position_id}:\n"
                    f"‚Ä¢ –¢–æ–∫–µ–Ω: {token_info.get('name')} ({token_info.get('symbol')})\n"
                    f"‚Ä¢ –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {quote['price']:.6f} SOL\n"
                    f"‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quote['outAmount']/1e9:.6f}\n"
                    f"‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å: {amount/1e9:.4f} SOL"
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")
                await self.send_log("‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é")
            
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É: {str(e)}")
            await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            return False
            
    async def execute_transaction_with_retry(self, transaction: Dict, required_sol: Decimal, max_retries: int = 3) -> Optional[str]:
        """–í–∏–∫–æ–Ω—É—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
        try:
            for attempt in range(max_retries):
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º
                    balance = await self.get_balance()
                    if not balance or Decimal(str(balance.get('sol_balance', 0))) < required_sol:
                        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SOL –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –ü–æ—Ç—Ä—ñ–±–Ω–æ: {required_sol}, –ù–∞—è–≤–Ω–æ: {balance.get('sol_balance', 0) if balance else 0}")
                        return None
                        
                    # –ü—ñ–¥–ø–∏—Å—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                    signature = await self.quicknode.sign_and_send_transaction(transaction)
                    if not signature:
                        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–ø–∏—Å–∞—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é")
                        continue
                        
                    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {signature}")
                    
                    # –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                    status = await self.quicknode.wait_for_confirmation(signature)
                    if status == 'confirmed':
                        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {signature} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞")
                        await self.send_log(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞: {signature}")
                        return signature
                    elif status == 'failed':
                        logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {signature} –Ω–µ –≤–¥–∞–ª–∞—Å—è")
                        continue
                        
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (—Å–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries}): {e}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(1)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    continue
                    
            logger.error("–í–∏—á–µ—Ä–ø–∞–Ω–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó")
            return None
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")
            return None
            
    async def monitor_positions(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
        while True:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
                positions = self.db.get_open_positions()
                if not positions:
                    await asyncio.sleep(30)
                    continue
                    
                logger.info(f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ {len(positions)} –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
                
                for position in positions:
                    try:
                        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
                        price = await self.jupiter.get_price(position['token_address'])
                        if not price:
                            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó {position['id']}")
                            continue
                            
                        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ PnL
                        entry_price = position['entry_price']
                        current_price = float(price)
                        pnl_percent = ((current_price - entry_price) / entry_price) * 100
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É –≤ –ë–î
                        self.db.update_position(position['id'], {
                            'current_price': current_price,
                            'pnl_percent': pnl_percent,
                            'updated_at': datetime.now()
                        })
                        
                        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                        settings = self.db.get_settings()
                        tp_levels = [
                            float(settings.get('tp_1_percent', 20)),
                            float(settings.get('tp_2_percent', 20)),
                            float(settings.get('tp_3_percent', 20))
                        ]
                        sl_level = float(settings.get('stop_loss_level', -75))
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ take-profit —Ä—ñ–≤–Ω—ñ
                        if not position['tp_1_hit'] and pnl_percent >= tp_levels[0]:
                            await self.execute_take_profit(position, 1, tp_levels[0])
                        elif not position['tp_2_hit'] and pnl_percent >= tp_levels[1]:
                            await self.execute_take_profit(position, 2, tp_levels[1])
                        elif not position['tp_3_hit'] and pnl_percent >= tp_levels[2]:
                            await self.execute_take_profit(position, 3, tp_levels[2])
                            
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ stop-loss
                        if pnl_percent <= sl_level:
                            await self.execute_stop_loss(position)
                            
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ—ó {position['id']}: {e}")
                        continue
                        
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ–π: {e}")
                
            await asyncio.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            
    async def execute_take_profit(self, position: Dict, tp_level: int, tp_percent: float) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è take-profit"""
        try:
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
            remaining_amount = position['remaining_amount']
            sell_percent = 33.33  # –ü—Ä–æ–¥–∞—î–º–æ —Ç—Ä–µ—Ç–∏–Ω—É –∑–∞–ª–∏—à–∫—É –Ω–∞ –∫–æ–∂–Ω–æ–º—É TP
            amount_to_sell = remaining_amount * (sell_percent / 100)
            
            logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è TP{tp_level} –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó {position['id']}")
            await self.send_log(
                f"üéØ Take-profit {tp_level} –¥–ª—è {position['token_symbol']}:\n"
                f"‚Ä¢ –ü—Ä–∏–±—É—Ç–æ–∫: {tp_percent:.1f}%\n"
                f"‚Ä¢ –ü—Ä–æ–¥–∞–∂: {sell_percent:.1f}% –ø–æ–∑–∏—Ü—ñ—ó"
            )
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–≤–æ—Ç—É –¥–ª—è ÔøΩÔøΩ—Ä–æ–¥–∞–∂—É
            quote = await self.jupiter.get_quote(
                input_mint=position['token_address'],
                output_mint=WSOL_ADDRESS,
                amount=int(amount_to_sell * 1e9)
            )
            
            if not quote:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–≤–æ—Ç—É –¥–ª—è TP{tp_level}")
                await self.send_log(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–≤–æ—Ç—É –¥–ª—è TP{tp_level}")
                return False
                
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            transaction = await self.jupiter.get_swap_transaction(quote)
            if not transaction:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è TP{tp_level}")
                await self.send_log(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è TP{tp_level}")
                return False
                
            # –í–∏–∫–æ–Ω—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            signature = await self.execute_transaction_with_retry(
                transaction=transaction,
                required_sol=Decimal(str(quote['inAmount'] / 1e9))
            )
            
            if not signature:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é TP{tp_level}")
                await self.send_log(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é TP{tp_level}")
                return False
                
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
            new_remaining = remaining_amount * (1 - sell_percent / 100)
            updates = {
                f'tp_{tp_level}_hit': True,
                f'tp_{tp_level}_price': float(quote['price']),
                f'tp_{tp_level}_transaction': signature,
                'remaining_amount': new_remaining,
                'updated_at': datetime.now()
            }
            
            self.db.update_position(position['id'], updates)
            
            logger.info(f"TP{tp_level} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ: {signature}")
            await self.send_log(
                f"‚úÖ TP{tp_level} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ:\n"
                f"‚Ä¢ –¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {quote['price']:.6f} SOL\n"
                f"‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–æ: {quote['outAmount']/1e9:.4f} SOL\n"
                f"‚Ä¢ –ó–∞–ª–∏—à–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó: {new_remaining:.6f}"
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è TP{tp_level}: {e}")
            await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–ΩÔøΩÔøΩ—è TP{tp_level}: {str(e)}")
            return False
            
    async def execute_stop_loss(self, position: Dict) -> bool:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è stop-loss"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–≤–æ—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –≤—Å—ñ—î—ó –ø–æ–∑–∏—Ü—ñ—ó
            quote = await self.jupiter.get_quote(
                input_mint=position['token_address'],
                output_mint=WSOL_ADDRESS,
                amount=int(position['amount'] * 1e9)
            )
            
            if not quote:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–≤–æ—Ç—É –¥–ª—è stop-loss")
                return False
                
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            transaction = await self.jupiter.get_swap_transaction(quote)
            if not transaction:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è stop-loss")
                return False
                
            # –í–∏–∫–æ–Ω—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            signature = await self.execute_transaction_with_retry(
                transaction=transaction,
                required_sol=Decimal(str(quote['inAmount'] / 1e9))
            )
            
            if not signature:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—ÇÔøΩÔøΩ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é stop-loss")
                return False
                
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
            self.db.update_position(
                position['id'],
                {
                    'status': 'closed',
                    'exit_price': quote['outAmount'] / 1e9,
                    'exit_transaction': signature
                }
            )
            
            logger.info(f"Stop-loss –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ: {signature}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è stop-loss: {e}")
            return False
