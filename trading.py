"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
"""

import os
from datetime import datetime
import uuid
from dotenv import load_dotenv
from solders.keypair import Keypair
import base58
from loguru import logger
from decimal import Decimal
import asyncio
from typing import Optional

from api.jupiter import JupiterAPI
from api.quicknode import QuicknodeAPI
from model.transaction import Transaction
from model.quote import Quote
from model.position import Position
from model.wallet_activity import WalletActivity
from model.bot_session import BotSession
from model.trade_stats import TradeStats

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
WSOL_ADDRESS = "So11111111111111111111111111111111111111112"
MIN_SOL_BALANCE = Decimal("0.02")  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å SOL –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π
TRANSACTION_CONFIRMATION_TIMEOUT = 60  # –¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# Take-profit —Ä—ñ–≤–Ω—ñ
TAKE_PROFIT_LEVELS = [
    {"level": Decimal("1"), "sell_percent": Decimal("20")},   # 100% - –ø—Ä–æ–¥–∞–∂ 20%
    {"level": Decimal("2.5"), "sell_percent": Decimal("20")}, # 250% - –ø—Ä–æ–¥–∞–∂ 20%
    {"level": Decimal("5"), "sell_percent": Decimal("20")},   # 500% - –ø—Ä–æ–¥–∞–∂ 20%
    {"level": Decimal("10"), "sell_percent": Decimal("20")},  # 1000% - –ø—Ä–æ–¥–∞–∂ 20%
    {"level": Decimal("30"), "sell_percent": Decimal("25")},  # 3000% - –ø—Ä–æ–¥–∞–∂ 25%
    {"level": Decimal("90"), "sell_percent": Decimal("50")}   # 9000% - –ø—Ä–æ–¥–∞–∂ 50%
]

# Stop-loss —Ä—ñ–≤–µ–Ω—å
STOP_LOSS_LEVEL = Decimal("-0.75")  # -75%

class TradingExecutor:
    def __init__(self):
        load_dotenv()
        self.private_key = os.getenv('SOLANA_PRIVATE_KEY')
        if not self.private_key:
            raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ–π SOLANA_PRIVATE_KEY")
        self.keypair = Keypair.from_bytes(base58.b58decode(self.private_key))
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ API –∫–ª—ñ—î–Ω—Ç–∏
        self.quicknode = QuicknodeAPI()
        self.jupiter = JupiterAPI()
        self.client = None
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –±–æ—Ç–∞
        self.session = BotSession(
            id=str(uuid.uuid4()),
            start_time=datetime.now(),
            status='running'
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats = TradeStats(
            period='day',
            start_time=datetime.now()
        )
        
        # –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ —ó—Ö –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        self.active_positions = {}  # token_address -> Position
        
        # –Ü—Å—Ç–æ—Ä—ñ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        self.activities = []
        
    async def wait_for_transaction_confirmation(self, signature: str, max_attempts: int = 30) -> bool:
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
        attempt = 1
        wait_time = 1  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        while attempt <= max_attempts:
            logger.info(f"–°–ø—Ä–æ–±–∞ {attempt}: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó {signature}")
            
            status = await self.quicknode.get_transaction_status(signature)
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞—Ç—É—Å: {status}")
            
            if status == 'confirmed':
                # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                new_balance = await self.quicknode.get_sol_balance(str(self.keypair.pubkey()))
                logger.info(f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {new_balance:.9f} SOL")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                await self.send_log(
                    f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!\n"
                    f"‚Ä¢ –ü—ñ–¥–ø–∏—Å: {signature}\n"
                    f"‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://solscan.io/tx/{signature}\n"
                    f"‚Ä¢ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.9f} SOL"
                )
                return True
                
            elif status == 'failed':
                error_msg = f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: {signature}"
                logger.error(error_msg)
                await self.send_log(
                    f"{error_msg}\n"
                    f"‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://solscan.io/tx/{signature}"
                )
                return False
                
            elif status == 'pending':
                await self.send_log(
                    f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó...\n"
                    f"‚Ä¢ –°–ø—Ä–æ–±–∞: {attempt}/{max_attempts}\n"
                    f"‚Ä¢ –ü—ñ–¥–ø–∏—Å: {signature}\n"
                    f"‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://solscan.io/tx/{signature}"
                )
                
                # –ó–±—ñ–ª—å—à—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ
                logger.info(f"–ß–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                await asyncio.sleep(wait_time)
                wait_time = min(wait_time * 2, 10)  # –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
                attempt += 1
                continue
                
            else:
                error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {signature}"
                logger.error(error_msg)
                await self.send_log(
                    f"{error_msg}\n"
                    f"‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://solscan.io/tx/{signature}"
                )
                return False
        
        error_msg = f"‚ùå –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± ({max_attempts}) –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó {signature}"
        logger.error(error_msg)
        await self.send_log(
            f"{error_msg}\n"
            f"‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://solscan.io/tx/{signature}"
        )
        return False
        
    async def monitor_position(self, position: Position):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è take-profit —Ç–∞ stop-loss"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –≤ SOL
            quote_data = await self.jupiter.get_quote(
                input_mint=position.token_address,
                output_mint=WSOL_ADDRESS,
                amount=int(float(position.amount) * 1e9),  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ª–∞–º–ø–æ—Ä—Ç–∏
                slippage_bps=100
            )
            
            if not quote_data:
                return
                
            current_value = Decimal(str(quote_data['outAmount']))
            profit_percent = (current_value - position.initial_value) / position.initial_value
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ stop-loss
            if profit_percent <= STOP_LOSS_LEVEL:
                await self.execute_exit(position, position.remaining_amount, "stop_loss")
                return
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ take-profit —Ä—ñ–≤–Ω—ñ
            for tp_level in TAKE_PROFIT_LEVELS:
                if profit_percent >= tp_level["level"] and not position.is_level_triggered(tp_level["level"]):
                    sell_amount = position.remaining_amount * tp_level["sell_percent"] / Decimal("100")
                    await self.execute_exit(position, sell_amount, f"take_profit_{tp_level['level']}x")
                    position.mark_level_triggered(tp_level["level"])
                    
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ—ó: {e}")

    async def execute_exit(self, position: Position, amount: Decimal, reason: str):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–∏—Ö–æ–¥—É –∑ –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            logger.info(f"–í–∏–∫–æ–Ω—É—î–º–æ –≤–∏—Ö—ñ–¥ –∑ –ø–æ–∑–∏—Ü—ñ—ó: {amount} —Ç–æ–∫–µ–Ω—ñ–≤, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
            
            quote_data = await self.jupiter.get_quote(
                input_mint=position.token_address,
                output_mint=WSOL_ADDRESS,
                amount=int(float(amount) * 1e9),  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ª–∞–º–ø–æ—Ä—Ç–∏
                slippage_bps=100
            )
            
            if not quote_data:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏—Ö–æ–¥—É")
                return
                
            signature = await self.jupiter.sign_and_send(quote_data, self.keypair)
            if signature:
                # –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                status = await self.wait_for_transaction_confirmation(signature)
                if status == "confirmed":
                    position.remaining_amount -= amount
                    await self.send_log(
                        f"üîÑ –ß–∞—Å—Ç–∫–æ–≤–∏–π –≤–∏—Ö—ñ–¥ –∑ ÔøΩÔøΩ–æ–∑–∏—Ü—ñ—ó:\n"
                        f"‚Ä¢ –¢–æ–∫–µ–Ω: {position.token_address}\n"
                        f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                        f"‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ: {amount}\n"
                        f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è: https://solscan.io/tx/{signature}"
                    )
                else:
                    await self.send_log(
                        f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –ø–æ–∑–∏—Ü—ñ—ó:\n"
                        f"‚Ä¢ –¢–æ–∫–µ–Ω: {position.token_address}\n"
                        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
                        f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è: https://solscan.io/tx/{signature}"
                    )
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –ø–æ–∑–∏—Ü—ñ—ó: {e}")

    async def start(self, telegram_client):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞"""
        self.client = telegram_client
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å SOL
            balance = await self.quicknode.get_sol_balance()
            logger.info(f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å SOL: {balance:.4f}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏
            tokens = await self.quicknode.get_all_tokens()
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –≥–∞–º–∞–Ω—Ü—ñ")
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = [
                "üöÄ –¢–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–ø—É—â–µ–Ω–æ",
                f"üí∞ –ë–∞–ª–∞–Ω—Å SOL: {balance:.4f}",
                f"üîë –ê–¥—Ä–µ—Å–∞: {self.keypair.pubkey()}",
                f"üìä –°–µ—Å—ñ—è: {self.session.id[:8]}",
                "\nüìù –¢–æ–∫–µ–Ω–∏ –Ω–∞ –≥–∞–º–∞–Ω—Ü—ñ:"
            ]
            
            for token in tokens:
                message.append(
                    f"‚Ä¢ {token['symbol']}: {token['balance']:.{token['decimals']}f}"
                    f"\n  ‚îî –ê–¥—Ä–µ—Å–∞: {token['mint']}"
                )
                
            # –ó–∞–ø–∏—Å—É—î–º–æ –∞–∫—Ç–∏–≤—ñ—Å—Ç—å –≥–∞–º–∞–Ω—Ü—è
            activity = WalletActivity(
                wallet_address=str(self.keypair.pubkey()),
                activity_type='check',
                token_address=WSOL_ADDRESS,
                amount=Decimal(str(balance)),
                timestamp=datetime.now(),
                transaction_signature='',
                token_symbol='SOL'
            )
            
            self.activities.append(activity)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–ΩÔøΩÔøΩ—è –≤ –ª–æ–≥
            await self.send_log("\n".join(message))
            
        except Exception as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É:\n{str(e)}"
            logger.error(error_msg)
            await self.send_log(error_msg)
            
    async def handle_trade_signal(self, signal):
        """–û–±—Ä–æ–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É"""
        try:
            logger.info(f"1. –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {signal.token_address}")
            self.session.processed_signals += 1
            signal.update_status('processing')
            
            # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
            balance = await self.quicknode.get_sol_balance()
            if balance is None or balance < MIN_SOL_BALANCE:
                error_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤: {balance:.4f} SOL"
                signal.update_status('failed', error_msg)
                await self.send_log(error_msg)
                return
            logger.info(f"2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É: {balance:.4f} SOL")
            
            # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
            if not await self.quicknode.verify_token(signal.token_address):
                error_msg = "‚ùå –¢–æ–∫–µ–Ω –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ —î SPL —Ç–æ–∫–µ–Ω–æ–º"
                signal.update_status('failed', error_msg)
                await self.send_log(error_msg)
                return
            logger.info("3. –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ")
            
            # 4. –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω
            token_info = await self.quicknode.get_token_info(signal.token_address)
            token_symbol = "Unknown"
            token_name = "Unknown Token"
            
            if token_info:
                token_symbol = token_info.get('symbol', 'Unknown')
                token_name = token_info.get('name', 'Unknown Token')
                logger.info(f"4. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–∫–µ–Ω: {token_symbol} ({token_name})")
            else:
                logger.warning("4. –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω")
                
            # 5. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó (5% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)
            position_size = Decimal(str(balance)) * Decimal(str(os.getenv('INITIAL_POSITION_PERCENT', '5'))) / Decimal('100')
            signal.amount_sol = position_size
            logger.info(f"5. –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: {position_size:.6f} SOL")
            
            # 6. –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è
            quote_data = await self.jupiter.get_quote(
                input_mint=WSOL_ADDRESS,
                output_mint=signal.token_address,
                amount=int(float(position_size) * 1e9),  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ª–∞–º–ø–æ—Ä—Ç–∏
                slippage_bps=100
            )
            
            if not quote_data:
                error_msg = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è"
                signal.update_status('failed', error_msg)
                await self.send_log(error_msg)
                return
            logger.info("6. –ö–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ")
            
            # 7. –í–∏–∫–æ–Ω—É—î–º–æ —Å–≤–æ–ø
            logger.info("7. –í–∏–∫–æ–Ω—É—î–º–æ —Å–≤–æ–ø...")
            signature = await self.jupiter.sign_and_send(quote_data, self.keypair)
            if not signature:
                error_msg = "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"
                signal.update_status('failed', error_msg)
                await self.send_log(error_msg)
                return
                
            # 8. –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            status = await self.wait_for_transaction_confirmation(signature)
            if status == "confirmed":
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
                position = Position(
                    token_address=signal.token_address,
                    initial_amount=Decimal(str(quote_data['outAmount'])),
                    initial_value=position_size,
                    entry_price=position_size / Decimal(str(quote_data['outAmount'])),
                    timestamp=datetime.now()
                )
                
                # –î–æ–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö
                self.active_positions[signal.token_address] = position
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª—É
                signal.update_status('executed')
                
                # –ó–∞–ø–∏—Å—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                activity = WalletActivity(
                    wallet_address=str(self.keypair.pubkey()),
                    activity_type='buy',
                    token_address=signal.token_address,
                    amount=position.initial_amount,
                    timestamp=datetime.now(),
                    transaction_signature=signature,
                    token_symbol=token_symbol
                )
                self.activities.append(activity)
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –ø–æ–∫—É–ø–∫—É
                await self.send_log(
                    f"‚úÖ –£—Å–ø—ñ—à–Ω–∞ –ø–æ–∫—É–ø–∫–∞:\n"
                    f"‚Ä¢ –¢–æ–∫–µ–Ω: {token_symbol} ({signal.token_address})\n"
                    f"‚Ä¢ –°—É–º–∞: {position_size:.6f} SOL\n"
                    f"‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–æ: {position.initial_amount:.6f} —Ç–æ–∫–µ–Ω—ñ–≤\n"
                    f"‚Ä¢ –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {position.entry_price:.12f} SOL\n"
                    f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è: https://solscan.io/tx/{signature}"
                )
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ—ó
                asyncio.create_task(self.monitor_position(position))
                
            else:
                error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (—Å—Ç–∞—Ç—É—Å: {status})"
                signal.update_status('failed', error_msg)
                await self.send_log(error_msg)
                
        except Exception as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É: {str(e)}"
            logger.error(error_msg)
            signal.update_status('failed', error_msg)
            await self.send_log(error_msg)
            
    async def send_log(self, message: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ª–æ–≥—É –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            monitor_channel = int(os.getenv('MONITOR_CHANNEL_ID'))
            await self.client.send_message(monitor_channel, message)
            logger.debug(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª {monitor_channel}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—É: {e}")
            self.session.add_error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—É", {"error": str(e)})
            
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è"""
        try:
            self.session.stop("Manual stop")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –±–∞–ª–∞–Ω—Å–∏
            final_balance = await self.quicknode.get_sol_balance()
            tokens = await self.quicknode.get_all_tokens()
            
            message = [
                "üõë –¢–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑—É–ø–∏–Ω–µ–Ω–æ",
                "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ—ó:",
                f"‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.session.processed_signals}",
                f"‚Ä¢ –£—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥: {self.session.successful_trades}",
                f"‚Ä¢ –ù–µ–≤–¥–∞–ª–∏—Ö —É–≥–æ–¥: {self.session.failed_trades}",
                f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º: {float(self.session.total_volume):.4f} SOL",
                "\nüí∞ –§—ñ–Ω–∞–ª—å–Ω—ñ –±–∞–ª–∞–Ω—Å–∏:"
            ]
            
            message.append(f"‚Ä¢ SOL: {final_balance:.4f}")
            for token in tokens:
                if token['mint'] != WSOL_ADDRESS:
                    message.append(
                        f"‚Ä¢ {token['symbol']}: {token['balance']:.{token['decimals']}f}"
                    )
                    
            await self.send_log("\n".join(message))
            
        except Exception as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞: {str(e)}"
            logger.error(error_msg)
            await self.send_log(error_msg)
            
        finally:
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ API –∫–ª—ñ—î–Ω—Ç–∏
            await self.quicknode.close()
            await self.jupiter.close()
            
    async def cleanup(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        try:
            await self.quicknode.close()
            await self.jupiter.close()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å—ñ–≤: {e}")
            
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ await —Ç—É—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –º–µ—Ç–æ–¥
        pass