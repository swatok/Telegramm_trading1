"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
"""

import os
from datetime import datetime
import uuid
from dotenv import load_dotenv
from solders.keypair import Keypair
import base58
from loguru import logger
from decimal import Decimal

from api.jupiter import JupiterAPI
from api.quicknode import QuicknodeAPI
from model.transaction import Transaction
from model.quote import Quote
from model.position import Position
from model.wallet_activity import WalletActivity
from model.bot_session import BotSession
from model.trade_stats import TradeStats

WSOL_ADDRESS = "So11111111111111111111111111111111111111112"
MIN_SOL_BALANCE = Decimal("0.02")  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å SOL –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π

class TradingExecutor:
    def __init__(self):
        load_dotenv()
        self.private_key = os.getenv('SOLANA_PRIVATE_KEY')
        if not self.private_key:
            raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ–π SOLANA_PRIVATE_KEY")
        self.keypair = Keypair.from_bytes(base58.b58decode(self.private_key))
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ API –∫–ª—ñ—î–Ω—Ç–∏
        self.quicknode = QuicknodeAPI()
        self.jupiter = JupiterAPI()
        self.client = None
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –±–æ—Ç–∞
        self.session = BotSession(
            id=str(uuid.uuid4()),
            start_time=datetime.now(),
            status='running'
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats = TradeStats(
            period='day',
            start_time=datetime.now()
        )
        
        # –Ü—Å—Ç–æ—Ä—ñ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        self.activities = []
        
    async def start(self, telegram_client):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞"""
        self.client = telegram_client
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
        balance = await self.quicknode.get_sol_balance()
        logger.info(f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {balance:.4f} SOL")
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≥–∞–º–∞–Ω—Ü—è
        activity = WalletActivity(
            wallet_address=str(self.keypair.pubkey()),
            activity_type='check',
            token_address=WSOL_ADDRESS,
            amount=Decimal(str(balance)),
            timestamp=datetime.now(),
            transaction_signature='',
            token_symbol='SOL'
        )
        self.activities.append(activity)
        
        await self.send_log(
            f"üöÄ –¢–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–ø—É—â–µ–Ω–æ\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è: {balance:.4f} SOL\n"
            f"üîë –ê–¥—Ä–µ—Å–∞: {self.keypair.pubkey()}\n"
            f"üìä –°–µ—Å—ñ—è: {self.session.id[:8]}"
        )
        
    async def send_log(self, message: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ª–æ–≥—É –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            monitor_channel = int(os.getenv('MONITOR_CHANNEL_ID'))
            await self.client.send_message(monitor_channel, message)
            logger.debug(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª {monitor_channel}: {message}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—É: {e}")
            self.session.add_error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—É", {"error": str(e)})
            
    async def handle_trade_signal(self, signal):
        """–û–±—Ä–æ–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É"""
        try:
            logger.info(f"–ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —Å–∏–≥–Ω–∞–ª—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {signal.token_address}")
            self.session.processed_signals += 1
            signal.update_status('processing')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
            balance = await self.quicknode.get_sol_balance()
            if balance is None:
                signal.update_status('failed', "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É")
                self.session.add_error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É")
                await self.send_log("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É")
                return
                
            logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance:.4f} SOL")
            
            if Decimal(str(balance)) < MIN_SOL_BALANCE:
                signal.update_status('failed', f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤: {balance} SOL")
                self.session.add_warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤", {
                    "balance": str(balance),
                    "required": str(MIN_SOL_BALANCE)
                })
                await self.send_log(
                    f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Å–≤–æ–ø—É\n"
                    f"–ù–µ–æ–±—Ö—ñ–¥–Ω–æ: {MIN_SOL_BALANCE} SOL\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {balance:.4f} SOL"
                )
                return
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
            is_available = await self.quicknode.verify_token(signal.token_address)
            if not is_available:
                signal.update_status('failed', "–¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –º–µ—Ä–µ–∂—ñ")
                self.session.add_warning("–¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", {
                    "token_address": signal.token_address
                })
                await self.send_log(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {signal.token_address}")
                return
                
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è
            logger.info("–ó–∞–ø–∏—Ç –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥ Jupiter")
            quote_data = await self.jupiter.get_quote(
                input_mint=WSOL_ADDRESS,
                output_mint=signal.token_address,
                amount=float(signal.amount_sol),  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ amount_sol –∑ —Å–∏–≥–Ω–∞–ª—É
                slippage_bps=int(signal.slippage * 100)  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ % –≤ bps
            )
            
            if not quote_data:
                signal.update_status('failed', "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è")
                self.session.add_error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è")
                await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞")
                return
                
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Quote
            quote = Quote(
                input_mint=WSOL_ADDRESS,
                output_mint=signal.token_address,
                in_amount=signal.amount_sol,
                out_amount=Decimal(str(quote_data['outAmount'])),
                price_impact=Decimal(str(quote_data.get('priceImpact', 0))),
                slippage=signal.slippage,
                route_plan=quote_data['routePlan'],
                other_amount_threshold=Decimal(str(quote_data['otherAmountThreshold'])),
                swap_mode=quote_data.get('swapMode', 'ExactIn')
            )
            
            # –í–∏–∫–æ–Ω—É—î–º–æ —Å–≤–æ–ø
            signature = await self.jupiter.sign_and_send(quote_data, self.keypair)
            if signature:
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                tx = Transaction(
                    signature=signature,
                    status='pending',
                    timestamp=datetime.now(),
                    token_address=signal.token_address,
                    amount=quote.in_amount,
                    type='swap',
                    swap_info={
                        'input_mint': quote.input_mint,
                        'output_mint': quote.output_mint,
                        'price_impact': float(quote.price_impact)
                    },
                    input_amount=quote.in_amount,
                    output_amount=quote.out_amount,
                    price_impact=quote.price_impact
                )
                
                logger.info(f"–°–≤–æ–ø —É—Å–ø—ñ—à–Ω–∏–π: {signature}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—îÔøΩÔøΩ–æ –Ω–æ–≤—ñ –±–∞–ª–∞–Ω—Å–∏
                new_balance = await self.quicknode.get_sol_balance()
                new_token_balance = await self.quicknode.get_token_balance(signal.token_address)
                
                # –ó–∞–ø–∏—Å—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≥–∞–º–∞–Ω—Ü—è
                activity = WalletActivity(
                    wallet_address=str(self.keypair.pubkey()),
                    activity_type='swap',
                    token_address=signal.token_address,
                    amount=quote.in_amount,
                    timestamp=datetime.now(),
                    transaction_signature=signature,
                    token_symbol=signal.token.symbol,
                    price_impact=quote.price_impact,
                    slippage=quote.slippage,
                    swap_info={
                        'input_mint': quote.input_mint,
                        'output_mint': quote.output_mint,
                        'route_plan': quote.route_plan
                    }
                )
                self.activities.append(activity)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª—É
                signal.update_status('executed')
                signal.transaction_signature = signature
                signal.execution_price = quote.price
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.session.successful_trades += 1
                self.session.total_volume += quote.in_amount
                
                # –î–æ–¥–∞—î–º–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats.add_trade(
                    token=signal.token_address,
                    amount=quote.in_amount,
                    profit=Decimal("0"),  # –ü–æ–∫–∏ —â–æ –Ω–µ —Ä–∞—Ö—É—î–º–æ
                    fees=quote.total_fee_amount,
                    timestamp=datetime.now(),
                    success=True
                )
                
                await self.send_log(
                    f"‚úÖ –°–≤–æ–ø —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!\n"
                    f"- –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å SOL: {new_balance:.4f}\n"
                    f"- –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞: {new_token_balance:.9f}\n"
                    f"- –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è: https://solscan.io/tx/{signature}"
                )
            else:
                signal.update_status('failed', "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–≤–æ–ø—É")
                self.session.failed_trades += 1
                self.session.add_error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–≤–æ–ø—É")
                await self.send_log("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–≤–æ–ø—É")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É: {e}", exc_info=True)
            signal.update_status('failed', str(e))
            self.session.add_error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É", {"error": str(e)})
            await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è"""
        self.session.stop("Manual stop")
        await self.send_log(
            f"üõë –¢–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑—É–ø–∏–Ω–µ–Ω–æ\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ—ó:\n"
            f"- –û–±—Ä–æ–±–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.session.processed_signals}\n"
            f"- –£—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥: {self.session.successful_trades}\n"
            f"- –ù–µ–≤–¥–∞–ª–∏—Ö —É–≥–æ–¥: {self.session.failed_trades}\n"
            f"- –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º: {float(self.session.total_volume):.4f} SOL"
        )
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ API –∫–ª—ñ—î–Ω—Ç–∏
        await self.quicknode.close()
        await self.jupiter.close()
        
    async def cleanup(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        try:
            await self.quicknode.close()
            await self.jupiter.close()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å—ñ–≤: {e}")
            
    def __del__(self):
        """–î–µ—Å—ÇÔøΩÔøΩ—É–∫—Ç–æ—Ä"""
        # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ await —Ç—É—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –º–µ—Ç–æ–¥
        pass