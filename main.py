"""
–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ Telegram
"""

import os
import json
import asyncio
from datetime import datetime
from telethon import TelegramClient, events
from dotenv import load_dotenv
from loguru import logger

from message_parser import MessageParser
from trading import TradingExecutor
from config import setup_logging
from model.channel import Channel

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging()

class TradingBot:
    def __init__(self):
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        load_dotenv()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ .env
        self.api_id = int(os.getenv('TELEGRAM_API_ID'))
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        self.session_name = 'telegram_session'  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –Ω–∞–∑–≤–∞ —Å–µ—Å—ñ—ó
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤
        channels_json = os.getenv('SOURCE_CHANNELS', '["@mad_apes_gambles", "@testttggjb"]')
        channel_names = json.loads(channels_json)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏ –∫–∞–Ω–∞–ª—ñ–≤
        self.channels = [
            Channel(
                id=i,
                name=name,
                type='telegram',
                status='active'
            )
            for i, name in enumerate(channel_names)
        ]
        
        self.monitor_channel_id = int(os.getenv('MONITOR_CHANNEL_ID'))
        
        logger.info(
            f"TradingBot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:\n"
            f"- –ö–∞–Ω–∞–ª–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {[ch.name for ch in self.channels]}\n"
            f"- –ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥—ñ–≤: {self.monitor_channel_id}"
        )
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        self.client = TelegramClient(self.session_name, self.api_id, self.api_hash)
        self.message_parser = MessageParser()
        self.trading_executor = TradingExecutor()
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
            await self.client.start(phone=self.phone)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—ñ–≤
            me = await self.client.get_me()
            logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —è–∫: {me.username}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—ñ–≤
            for channel in self.channels:
                try:
                    entity = await self.client.get_entity(channel.name)
                    channel.settings['entity_id'] = entity.id
                    logger.info(f"–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É {channel.name} (ID: {entity.id})")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É {channel.name}: {e}")
                    channel.status = 'disabled'
                    channel.add_error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", {"error": str(e)})
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫
            try:
                await self.client.send_message(
                    self.monitor_channel_id,
                    "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏\n"
                    f"üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª—ñ–≤: {len([c for c in self.channels if c.is_active])}"
                )
                logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—ÄÔøΩÔøΩ–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫: {e}")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ trading executor
            await self.trading_executor.start(self.client)
            
            # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            @self.client.on(events.NewMessage(chats=[ch.name for ch in self.channels if ch.is_active]))
            async def handle_new_message(event):
                try:
                    message = event.message.text
                    channel_id = event.message.chat_id
                    message_id = event.message.id
                    
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞–Ω–∞–ª (–≤—Ä–∞—Ö–æ–≤—É—î–º–æ –º–æ–∂–ª–∏–≤–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å -1002)
                    channel = next(
                        (ch for ch in self.channels 
                         if ch.settings.get('entity_id') == abs(channel_id) or
                            ch.settings.get('entity_id') == abs(channel_id) % 1000000000000),
                        None
                    )
                    
                    if not channel:
                        logger.warning(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ –∫–∞–Ω–∞–ª—É: {channel_id}")
                        return
                        
                    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ {channel.name}:\n{message}")
                    
                    # –ü–∞—Ä—Å–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    signal = self.message_parser.parse_message(
                        message,
                        message_id=message_id,
                        channel_id=abs(channel_id)
                    )
                    
                    if signal:
                        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª: {signal}")
                        
                        # –î–æ–¥–∞—î–º–æ —Å–∏–≥–Ω–∞–ª –≤ —ñ—Å—Ç–æ—Ä—ñ—é –∫–∞–Ω–∞–ª—É
                        channel.add_to_history({
                            "token": signal.token.to_dict() if signal.token else {"address": signal.token_address},
                            "action": signal.action,
                            "amount_sol": str(signal.amount_sol) if signal.amount_sol else "0.1",
                            "confidence": str(signal.confidence_score)
                        })
                        
                        # –í–∏–∫–æ–Ω—É—î–º–æ —Ç–æ—Ä–≥–æ–≤—É –æ–ø–µ—Ä–∞—Ü—ñ—é
                        await self.trading_executor.handle_trade_signal(signal)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}", exc_info=True)
                    if channel:
                        channel.add_error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", {"error": str(e)})
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
            await self.client.run_until_disconnected()
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}", exc_info=True)
            raise
            
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞"""
        try:
            # –ó—É–ø–∏–Ω—è—î–º–æ trading executor
            await self.trading_executor.stop()
            
            # –û—á–∏—â—É—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
            await self.trading_executor.cleanup()
            
            # –ó—É–ø–∏–Ω—è—î–º–æ –∫–ª—ñ—î–Ω—Ç
            await self.client.disconnect()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—ñ–≤
            for channel in self.channels:
                channel.status = 'disabled'
            
            logger.info("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º—ñ–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: {e}", exc_info=True)

async def main():
    bot = None
    try:
        bot = TradingBot()
        await bot.start()
    except KeyboardInterrupt:
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
        if bot:
            await bot.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        if bot:
            await bot.stop()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True) 