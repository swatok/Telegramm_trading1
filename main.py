"""
–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ Telegram
"""

import os
import json
import asyncio
from datetime import datetime
from telethon import TelegramClient, events
from dotenv import load_dotenv
from loguru import logger
from telethon.tl.custom import Button
import logging
import sys
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
import ssl

from message_parser import MessageParser
from trading import TradingExecutor
from config import setup_logging
from model.channel import Channel
from database import Database

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging()

class TradingBot:
    def __init__(self, api_id, api_hash, bot_token):
        self.api_id = api_id
        self.api_hash = api_hash
        self.bot_token = bot_token
        self.db = Database()
        self.monitor_channel = None  # –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å
        self.trading_executor = TradingExecutor(
            db=self.db,
            send_log_callback=self.send_log,
            ssl_context=ssl_context
        )
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∏ Telegram
        self.monitor_client = TelegramClient(
            session='monitor_session',
            api_id=self.api_id,
            api_hash=self.api_hash
        )
        
        self.bot_client = TelegramClient(
            session='bot_session',
            api_id=self.api_id,
            api_hash=self.api_hash
        )
        
        self.waiting_for = {}
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
            logging.basicConfig(
                level=logging.INFO,
                format='%(asctime)s | %(levelname)s | %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            logging.getLogger('asyncio').setLevel(logging.WARNING)
            
            logger.info("–õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            self.db = Database()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            
            # –î–æ–¥–∞—î–º–æ –∫–∞–Ω–∞–ª–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            await self.setup_default_channels()
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            await self.monitor_client.start()
            logger.info("–ö–ª—ñ—î–Ω—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –±–æ—Ç–∞
            await self.bot_client.start()
            logger.info("–ö–ª—ñ—î–Ω—Ç –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            self.register_handlers()
            logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å
            self.trading_executor = TradingExecutor(
                db=self.db,
                send_log_callback=self.send_log,
                ssl_context=None
            )
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å
            await self.trading_executor.__aenter__()
            
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
                balance = await self.trading_executor.get_balance()
                if balance:
                    logger.info(f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å SOL: {balance['sol_balance']}")
                
                logger.info("–¢–æ—Ä–≥–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–ø—É—â–µ–Ω–æ")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
                await asyncio.gather(
                    self.monitor_client.run_until_disconnected(),
                    self.bot_client.run_until_disconnected()
                )
                
            finally:
                # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Å—ñ—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
                await self.trading_executor.__aexit__(None, None, None)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
            raise
            
    async def stop(self):
        """–ó–ø–∏–Ω–∫–∞ –±–æ—Ç–∞"""
        try:
            if self.monitor_client:
                await self.monitor_client.disconnect()
            if self.bot_client:
                await self.bot_client.disconnect()
            await self.trading_executor.stop()
            logger.info("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: {e}", exc_info=True)

    async def manage_channels(self, event):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤
            channels = self.db.get_channels()
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª—ñ–≤
            message = "üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:\n\n"
            
            if not channels:
                message += "–ù–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤"
            else:
                for channel in channels:
                    status_emoji = "‚úÖ" if channel["status"] == "active" else "‚ùå"
                    message += f"{status_emoji} {channel['name']}\n"
                    
            # –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è
            buttons = []
            buttons.append([Button.inline("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", b"add_channel")])
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
            for channel in channels:
                channel_name = channel["name"]
                buttons.append([
                    Button.inline(f"{'üî¥ –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏' if channel['status'] == 'active' else 'üü¢ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏'} {channel_name}", 
                                f"toggle_channel:{channel_name}".encode()),
                    Button.inline("‚ùå", f"remove_channel:{channel_name}".encode())
                ])
                
            buttons.append([Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"main_menu")])
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await event.respond(message, buttons=buttons)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –∫–∞–Ω–∞–ª—ñ–≤: {e}")
            await event.respond("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –∫–∞–Ω–∞–ª—ñ–≤")

    async def add_channel(self, channel_name: str) -> str:
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–∞–Ω–∞–ª —ñ—Å–Ω—É—î
            channel = await self.monitor_client.get_entity(channel_name)
            if not channel:
                return f"‚ùå –ö–∞–Ω–∞–ª {channel_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                
            # –î–æ–¥–∞—î–º–æ –∫–∞–Ω–∞–ª –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            channel_data = {
                "name": channel_name,
                "type": "trading",
                "status": "active",
                "settings": {}
            }
            if self.db.add_channel(channel_data):
                # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ –∫–∞–Ω–∞–ª—É
                await self.monitor_client(JoinChannelRequest(channel))
                return f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ"
            else:
                return f"‚ùå –ö–∞–Ω–∞–ª {channel_name} –≤–∂–µ —ñ—Å–Ω—É—î"
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É {channel_name}: {e}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É: {str(e)}"
            
    async def remove_channel(self, channel_name: str) -> str:
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            channel = self.db.get_channel_by_name(channel_name)
            if not channel:
                return f"‚ùå –ö–∞–Ω–∞–ª {channel_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                
            # –í–∏–¥–∞–ª—è—î–º–æ –∫–∞–Ω–∞–ª –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            if self.db.delete_channel(channel_name):
                # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –≤—ñ–¥ –∫–∞–Ω–∞–ª—É
                channel_entity = await self.monitor_client.get_entity(channel_name)
                await self.monitor_client(LeaveChannelRequest(channel_entity))
                return f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} –≤–∏–¥–∞–ª–µ–Ω–æ"
            else:
                return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É {channel_name}"
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É {channel_name}: {e}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É: {str(e)}"
            
    async def toggle_channel(self, channel_name: str) -> str:
        """–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∫–∞–Ω–∞–ª—É (–∞–∫—Ç–∏–≤–Ω–∏–π/–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π)"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            channel = self.db.get_channel_by_name(channel_name)
            if not channel:
                return f"‚ùå –ö–∞–Ω–∞–ª {channel_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                
            # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π
            new_status = "inactive" if channel["status"] == "active" else "active"
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            updates = {"status": new_status}
            if self.db.update_channel(channel_name, updates):
                status_emoji = "‚úÖ" if new_status == "active" else "‚ùå"
                return f"{status_emoji} –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—É {channel_name} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_status}"
            else:
                return f"‚ùå –ü–æ–º–∏ÔøΩÔøΩ–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∫–∞–Ω–∞–ª—É {channel_name}"
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∫–∞–Ω–∞–ª—É {channel_name}: {e}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∫–∞–Ω–∞–ª—É: {str(e)}"

    def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π"""
        try:
            # –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            @self.bot_client.on(events.NewMessage(pattern='/start'))
            async def start_handler(event):
                """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
                try:
                    await event.respond(
                        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤—Ç–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç.\n\n"
                        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                        buttons=[
                            [Button.inline("üí∞ –ë–∞–ª–∞–Ω—Å —ñ –ø–æ–∑–∏—Ü—ñ—ó", b"balance_positions")],
                            [Button.inline("üìä –ê–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏", b"active_orders")],
                            [Button.inline("üì° –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏", b"channels_settings")],
                            [Button.inline("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", b"statistics")],
                            [Button.inline("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", b"settings")]
                        ]
                    )
                    await self.send_log(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {event.sender_id} —Ä–æ–∑–ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /start: {e}", exc_info=True)
                    await event.respond("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –º–µ–Ω—é")
                    await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {event.sender_id}: {str(e)}")
            
            # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
            @self.bot_client.on(events.CallbackQuery())
            async def callback_handler(event):
                """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
                try:
                    data = event.data.decode()
                    
                    # –õ–æ–≥—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
                    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {event.sender_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É: {data}")
                    await self.send_log(f"üëÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {event.sender_id} –æ–±—Ä–∞–≤ –æ–ø—Ü—ñ—é: {data}")
                    
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
                    max_retries = 3
                    for attempt in range(max_retries):
                        try:
                            await self.handle_callback(event, data)
                            await event.answer()  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É callback
                            break
                        except Exception as e:
                            if attempt == max_retries - 1:
                                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {e}")
                                await event.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É", alert=True)
                                await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {event.sender_id}: {str(e)}")
                        else:
                                await asyncio.sleep(1)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback: {e}")
                    try:
                        await event.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥—ñ—é", alert=True)
                    except:
                        pass
                    await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {event.sender_id}: {str(e)}")
            
            # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—ñ–≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            @self.monitor_client.on(events.NewMessage())
            async def monitor_message_handler(event):
                """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—ñ–≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª
                    channel = await event.get_chat()
                    channel_name = f"@{channel.username}" if channel.username else str(channel.id)
                    
                    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É –ª–æ–≥—ñ–≤
                    monitor_channel = os.getenv('MONITOR_CHANNEL_ID')
                    if monitor_channel:
                        if (channel_name == monitor_channel or 
                            str(channel.id) == monitor_channel or 
                            channel_name == "@botlogs7777"):
                            return
                    
                    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É {channel_name}")
                    logger.debug(f"–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {event.message.text}")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–∏–π
                    db_channel = self.db.get_channel_by_name(channel_name)
                    if not db_channel:
                        logger.warning(f"–ö–∞–Ω–∞–ª {channel_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                        return
                        
                    if db_channel['status'] != 'active':
                        logger.warning(f"–ö–∞–Ω–∞–ª {channel_name} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π")
                        return
                    
                    # –ü–∞—Ä—Å–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    parser = MessageParser()
                    signal = parser.parse(event.message.text)
                    
                    if signal:
                        logger.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —Å–∏–≥–Ω–∞–ª: {signal}")
                        
                        # –õ–æ–≥—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É
                        log_message = [
                            "üéØ –ù–û–í–ò–ô –°–ò–ì–ù–ê–õ",
                            f"‚Ä¢ –ö–∞–Ω–∞–ª: {channel_name}",
                            f"‚Ä¢ –¢–æ–∫–µ–Ω: {signal.get('token_name', 'Unknown')}",
                            f"‚Ä¢ –ê–¥—Ä–µ—Å–∞: {signal.get('token_address', 'Unknown')}",
                            f"‚Ä¢ –¢–∏–ø: {signal.get('signal_type', 'Unknown')}",
                            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
                        ]
                        await self.send_log("\n".join(log_message))
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è
                        if not signal.get('token_address'):
                            log_message = [
                                "‚ùå –ü–û–ú–ò–õ–ö–ê –°–ò–ì–ù–ê–õ–£",
                                "‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: –í—ñ–¥—Å—É—Ç–Ω—è –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞",
                                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
                            ]
                            await self.send_log("\n".join(log_message))
                            return
                            
                        # –î–æ–¥–∞—î–º–æ —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                        signal_data = {
                            'message_id': event.message.id,
                            'channel_id': channel.id,
                            'token_address': signal['token_address'],
                            'token_name': signal.get('token_name', 'Unknown'),
                            'signal_type': signal.get('signal_type', 'unknown'),
                            'price': signal.get('price', 0),
                            'amount': signal.get('amount', 0),
                            'timestamp': datetime.now(),
                            'status': 'received'
                        }
                        self.db.add_signal(signal_data)
                        
                        # –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ–±—Ä–æ–±–∫—É
                        await self.trading_executor.handle_trade_signal(signal)
                        
                    else:
                        logger.debug(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É")
                        
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                    await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
            
            logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤: {e}", exc_info=True)
            raise

    def setup_logging(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            if not os.path.exists('logs'):
                os.makedirs('logs')
                
            # –í–¥–∞–ª—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
            logger.remove()
            
            # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–∞–π–ª—É
            logger.add(
                'logs/bot.log',
                format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
                rotation="1 day",
                retention="7 days",
                level=20  # INFO
            )
            
            # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
            logger.add(
                sys.stdout,
                format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
                level=20  # INFO
            )
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
            logging.getLogger('telethon').setLevel(logging.WARNING)
            logging.getLogger('asyncio').setLevel(logging.WARNING)
            
            logger.info("–õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")
            raise

    async def handle_callback(self, event, data):
        """–û–±—Ä–æ–±–∫–∞ callback-—ñ–≤ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫"""
        try:
            if data == "add_channel":
                # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–∞–Ω–∞–ª—É
                await event.respond(
                    "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É —É —Ñ–æ—Ä–º–∞—Ç—ñ @channel_name:",
                    buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"manage_channels")]]
                )
                return
                    
            if data == "main_menu":
                await event.respond(
                    "ü§ñ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                    buttons=[
                        [Button.inline("üí∞ –ë–∞–ª–∞–Ω—Å —ñ –ø–æ–∑–∏—Ü—ñ—ó", b"balance_positions")],
                        [Button.inline("üìä –ê–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏", b"active_orders")],
                        [Button.inline("üì° –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏", b"manage_channels")],
                        [Button.inline("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", b"statistics")],
                        [Button.inline("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", b"settings")]
                    ]
                )
                
            elif data == "balance_positions":
                # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å
                balance = await self.trading_executor.get_balance()
                if balance and isinstance(balance, dict):
                    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    message = [
                        "üí∞ –ë–∞–ª–∞–Ω—Å —ñ –ø–æ–∑–∏—Ü—ñ—ó:\n",
                        f"‚Ä¢ SOL: {balance.get('sol_balance', 0):.4f}",
                        f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {balance.get('total_value', 0):.4f} SOL",
                        "\nüìä –¢–æ–∫–µ–Ω–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ:"
                    ]
                    
                    if 'tokens' in balance and balance['tokens']:
                        for token in balance['tokens']:
                            message.append(
                                f"\n‚Ä¢ {token['symbol']} ({token['name']}):"
                                f"\n  ‚îî –ë–∞–ª–∞–Ω—Å: {token['balance']:.6f}"
                                f"\n  ‚îî –¶—ñ–Ω–∞: {token['price']:.6f} SOL"
                                f"\n  ‚îî –í–∞—Ä—Ç—ñ—Å—Ç—å: {token['value']:.4f} SOL"
                            )
                    else:
                        message.append("\n–ù–º–∞—î —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ")
                    
                    await event.edit(
                        "\n".join(message),
                        buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"main_menu")]]
                    )
                else:
                    await event.edit(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É",
                        buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"main_menu")]]
                    )
                    
            elif data == "active_orders":
                # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏
                orders = self.db.get_active_orders()
                
                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                message = ["üìä –ê–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏:"]
                
                if orders:
                    for order in orders:
                        message.append(
                            f"\n‚Ä¢ –û—Ä–¥–µ—Ä #{order['id']}:"
                            f"\n  ‚îî –¢–∏–ø: {order['type']}"
                            f"\n  ‚îî –¶—ñ–Ω–∞: {order['price']:.6f} SOL"
                            f"\n  ‚îî –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {order['amount']:.6f}"
                            f"\n  ‚îî ÔøΩÔøΩ—Ç–∞—Ç—É—Å: {order['status']}"
                        )
                else:
                    message.append("\n–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤")
                    
                await event.edit(
                    "\n".join(message),
                    buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"main_menu")]]
                )
                
            elif data == "manage_channels":
                await self.manage_channels(event)
                
            elif data == "statistics":
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.db.get_trading_stats()
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
                today_signals = self.db.get_signals_in_time_range(
                    datetime.now().replace(hour=0, minute=0, second=0, microsecond=0),
                    datetime.now()
                )
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
                today_transactions = self.db.get_transactions_in_time_range(
                    datetime.now().replace(hour=0, minute=0, second=0, microsecond=0),
                    datetime.now()
                )
                
                message = ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n"]
                
                if stats and isinstance(stats, dict):
                    message.extend([
                        "üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
                        f"‚Ä¢ –í—Å—å–æ–≥–æ —É–≥–æ–¥: {stats.get('total_trades', 0)}",
                        f"‚Ä¢ –ü—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö: {stats.get('profitable_trades', 0)}",
                        f"‚Ä¢ –ó–±–∏—Ç–∫–æ–≤–∏—Ö: {stats.get('unprofitable_trades', 0)}",
                        f"‚Ä¢ –í—ñ–Ω—Ä–µ–π—Ç: {stats.get('win_rate', 0):.2f}%",
                        f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π P&L: {stats.get('total_pnl', 0):.4f} SOL",
                        f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π P&L: {stats.get('avg_pnl', 0):.4f} SOL",
                        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç: {stats.get('max_profit', 0):.4f} SOL",
                        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∑–±–∏—Ç–æ–∫: {stats.get('max_loss', 0):.4f} SOL",
                        f"‚Ä¢ –¢–æ—Ä–≥—É—î—Ç—å—Å—è —Ç–æ–∫–µ–Ω—ñ–≤: {stats.get('traded_tokens', 0)}",
                        f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º: {stats.get('total_volume', 0):.4f} SOL\n"
                    ])
                else:
                    message.append("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—è\n")
                    
                message.extend([
                    "üìÖ –°—å–æ–≥–æ–¥–Ω—ñ:",
                    f"‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {len(today_signals)}",
                    f"‚Ä¢ –í–∏–∫–æ–Ω–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {len(today_transactions)}"
                ])
                
                buttons = [
                    [Button.inline("üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", b"detailed_stats")],
                    [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"main_menu")]
                ]
                
                await event.edit("\n".join(message), buttons=buttons)
                
            elif data == "detailed_stats":
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞—Ö
                tokens = self.db.get_trades_by_token(None)  # None –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–∫–µ–Ω—ñ–≤
                
                message = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞—Ö:\n"]
                
                if tokens:
                    for token in tokens:
                        stats = self.db.get_token_stats(token['token_address'])
                        if stats:
                            message.append(
                                f"‚Ä¢ {token['token_name']}:"
                                f"\n  ‚îî –£–≥–æ–¥: {stats.get('total_trades', 0)}"
                                f"\n  ‚îî –í—ñ–Ω—Ä–µ–π—Ç: {stats.get('win_rate', 0):.2f}%"
                                f"\n  ‚îî P&L: {stats.get('total_pnl', 0):.4f} SOL"
                                f"\n  ‚îî –û–±'—î–º: {stats.get('total_volume', 0):.4f} SOL"
                            )
                else:
                    message.append("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                    
                await event.edit(
                    "\n".join(message),
                    buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"statistics")]]
                )
                
            elif data == "settings":
                await event.edit(
                    "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n"
                    "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:",
                    buttons=[
                        [Button.inline("üì° –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏", b"channels_settings")],
                        [Button.inline("üí∞ –¢–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏", b"trade_settings")],
                        [Button.inline("‚ö†Ô∏è –†–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", b"risk_settings")],
                        [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"main_menu")]
                    ]
                )
                
            elif data == "channels_settings":
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤
                channels = self.db.get_channels()
                message = ["üì° –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:\n"]
                
                if channels:
                    for channel in channels:
                        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if channel["status"] == "active" else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
                        message.append(f"{channel['name']}: {status}")
                else:
                    message.append("–ù–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤")
                    
                buttons = []
                for channel in channels:
                    buttons.append([
                        Button.inline(
                            f"{'üî¥ –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏' if channel['status'] == 'active' else 'üü¢ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏'} {channel['name']}", 
                            f"toggle_channel:{channel['name']}".encode()
                        )
                    ])
                    
                buttons.append([Button.inline("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", b"add_channel")])
                buttons.append([Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"settings")])
                
                await event.edit("\n".join(message), buttons=buttons)
                
            elif data == "trade_settings":
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                settings = self.db.get_settings()
                
                message = [
                    "üí∞ –¢–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\n",
                    f"‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å SOL: {settings.get('min_sol_balance', 0.02)}",
                    f"‚Ä¢ –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: {settings.get('position_size', 5)}%",
                    f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π slippage: {settings.get('max_slippage', 1)}%"
                ]
                
                buttons = [
                    [Button.inline("–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ–Ω. –±–∞–ª–∞–Ω—Å", b"edit_min_balance")],
                    [Button.inline("–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó", b"edit_position_size")],
                    [Button.inline("–ó–º—ñ–Ω–∏—Ç–∏ –º–∞–∫—Å. slippage", b"edit_max_slippage")],
                    [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"settings")]
                ]
                
                await event.edit("\n".join(message), buttons=buttons)
                
            elif data == "risk_settings":
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                settings = self.db.get_settings()
                
                message = [
                    "‚ö†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∏–∑–∏–∫—ñ–≤:\n",
                    "üìà Take-profit —Ä—ñ–≤–Ω—ñ:",
                    f"‚Ä¢ 100% –ø—Ä–∏–±—É—Ç–∫—É - –ø—Ä–æ–¥–∞–∂ {settings.get('tp_1_percent', 20)}%",
                    f"‚Ä¢ 250% –ø—Ä–∏–±—É—Ç–∫—É - –ø—Ä–æ–¥–∞–∂ {settings.get('tp_2_percent', 20)}%",
                    f"‚Ä¢ 500% –ø—Ä–∏–±—É—Ç–∫—É - –ø—Ä–æ–¥–∞–∂ {settings.get('tp_3_percent', 20)}%",
                    f"\nüìâ Stop-loss:",
                    f"‚Ä¢ –†—ñ–≤–µ–Ω—å: {settings.get('stop_loss_level', -75)}%"
                ]
                
                buttons = [
                    [Button.inline("–ó–º—ñ–Ω–∏—Ç–∏ take-profit", b"edit_tp_levels")],
                    [Button.inline("–ó–º—ñ–Ω–∏—Ç–∏ stop-loss", b"edit_sl_level")],
                    [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"settings")]
                ]
                
                await event.edit("\n".join(message), buttons=buttons)
                
            elif data.startswith("add_channel:"):
                channel_name = data.split(":")[1]
                result = await self.add_channel(channel_name)
                await event.edit(result, buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"manage_channels")]])
                
            elif data.startswith("remove_channel:"):
                channel_name = data.split(":")[1]
                result = await self.remove_channel(channel_name)
                await event.edit(result, buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"manage_channels")]])
                
            elif data.startswith("toggle_channel:"):
                channel_name = data.split(":")[1]
                channel = self.db.get_channel(channel_name)
                
                if channel:
                    new_status = "inactive" if channel["status"] == "active" else "active"
                    self.db.update_channel_status(channel_name, new_status)
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤
                    channels = self.db.get_channels()
                    message = ["üì° –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:\n"]
                    
                    for ch in channels:
                        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if ch["status"] == "active" else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
                        message.append(f"{ch['name']}: {status}")
                        
                    buttons = []
                    for ch in channels:
                        buttons.append([
                            Button.inline(
                                f"{'üî¥ –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏' if ch['status'] == 'active' else 'üü¢ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏'} {ch['name']}", 
                                f"toggle_channel:{ch['name']}".encode()
                            )
                        ])
                    
                    buttons.append([Button.inline("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", b"add_channel")])
                    buttons.append([Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"settings")])
                    
                    await event.edit(
                        f"{'‚úÖ –ö–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ' if new_status == 'active' else '‚ùå –ö–∞–Ω–∞–ª –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'}\n\n" + "\n".join(message),
                        buttons=buttons
                    )
                
            elif data.startswith("edit_"):
                setting = data.replace("edit_", "")
                
                if setting == "min_balance":
                    await event.edit(
                        "üí∞ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å SOL (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0.02):",
                        buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"trade_settings")]]
                    )
                    self.waiting_for[event.sender_id] = ("min_balance", None)
                    
                elif setting == "position_size":
                    await event.edit(
                        "üí∞ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5):",
                        buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"trade_settings")]]
                    )
                    self.waiting_for[event.sender_id] = ("position_size", None)
                    
                elif setting == "max_slippage":
                    await event.edit(
                        "üí∞ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π slippage —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1):",
                        buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"trade_settings")]]
                    )
                    self.waiting_for[event.sender_id] = ("max_slippage", None)
                    
                elif setting == "tp_levels":
                    await event.edit(
                        "üìà –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —Ä—ñ–≤–Ω—ñ take-profit —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20,20,20):",
                        buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"risk_settings")]]
                    )
                    self.waiting_for[event.sender_id] = ("tp_levels", None)
                    
                elif setting == "sl_level":
                    await event.edit(
                        "üìâ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å stop-loss —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: -75):",
                        buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"risk_settings")]]
                    )
                    self.waiting_for[event.sender_id] = ("sl_level", None)
                    
            # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
            elif event.sender_id in self.waiting_for:
                setting_type, _ = self.waiting_for[event.sender_id]
                value = event.text.strip()
                
                try:
                    if setting_type == "min_balance":
                        value = float(value)
                        if value <= 0:
                            raise ValueError("–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
                        self.db.update_setting("min_sol_balance", str(value))
                        
                    elif setting_type == "position_size":
                        value = float(value)
                        if not 0 < value <= 100:
                            raise ValueError("–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100")
                        self.db.update_setting("position_size", str(value))
                        
                    elif setting_type == "max_slippage":
                        value = float(value)
                        if not 0 < value <= 100:
                            raise ValueError("–óÔøΩÔøΩ–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100")
                        self.db.update_setting("max_slippage", str(value))
                        
                    elif setting_type == "tp_levels":
                        levels = [float(x.strip()) for x in value.split(",")]
                        if len(levels) != 3:
                            raise ValueError("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ 3 –∑–Ω–∞—á–µ–Ω–Ω—è")
                        if not all(0 <= x <= 100 for x in levels):
                            raise ValueError("–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—é—Ç—å –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ 100")
                        self.db.update_setting("tp_1_percent", str(levels[0]))
                        self.db.update_setting("tp_2_percent", str(levels[1]))
                        self.db.update_setting("tp_3_percent", str(levels[2]))
                        
                    elif setting_type == "sl_level":
                        value = float(value)
                        if not -100 < value < 0:
                            raise ValueError("–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ -100 –¥–æ 0")
                        self.db.update_setting("stop_loss_level", str(value))
                        
                    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –º–µ–Ω—é
                    if setting_type in ["min_balance", "position_size", "max_slippage"]:
                        await self.handle_callback(event, "trade_settings")
                    else:
                        await self.handle_callback(event, "risk_settings")
                        
                except ValueError as e:
                    await event.respond(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
                except Exception as e:
                    await event.respond("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–Ω—è")
                    
                # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                del self.waiting_for[event.sender_id]
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback: {e}")
            await event.edit(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
                buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"main_menu")]]
            )
            
    async def handle_new_message(self, event):
        """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª
            channel = await event.get_chat()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–∞–Ω–∞–ª
            db_channel = self.db.get_channel_by_name(f"@{channel.username}")
            if not db_channel or db_channel["status"] != "active":
                return
                
            # –ü–∞—Ä—Å–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            signal = self.message_parser.parse(event.message.text)
            if signal:
                # –î–æ–¥–∞—î–º–æ —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                signal_data = {
                    "message_id": event.message.id,
                    "channel_id": channel.id,
                    "token_address": signal.token_address,
                    "token_name": signal.token_name,
                    "signal_type": signal.signal_type,
                    "price": signal.price,
                    "amount": signal.amount
                }
                self.db.add_signal(signal_data)
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ —Å–∏–≥–Ω–∞–ª
                await self.trading_executor.handle_trade_signal(signal)
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")

    async def setup_default_channels(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        try:
            # –î–æ–¥–∞—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥—ñ–≤
            monitor_channel_id = os.getenv('MONITOR_CHANNEL_ID')
            if monitor_channel_id:
                monitor_channel_id = int(monitor_channel_id)
                self.monitor_channel = monitor_channel_id
                channel_data = {
                    'name': 'monitor_channel',
                    'type': 'monitor',
                    'status': 'active'
                }
                self.db.add_channel(channel_data)
                logger.info("–ö–∞–Ω–∞–ª –ª–æ–≥—ñ–≤ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
                logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª –ª–æ–≥—É–≤–∞–Ω–Ω—è: {monitor_channel_id}")
                
            # –î–æ–¥–∞—î–º–æ –∫–∞–Ω–∞–ª–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            source_channels = json.loads(os.getenv('SOURCE_CHANNELS', '[]'))
            added_count = 0
            
            for channel_name in source_channels:
                channel_data = {
                    'name': channel_name,
                    'type': 'source',
                    'status': 'active'
                }
                self.db.add_channel(channel_data)
                added_count += 1
                
            logger.info(f"–î–æ–¥–∞–Ω–æ {added_count} –∫–∞–Ω–∞–ª—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {e}")

    async def handle_trade_signal(self, signal):
        """–û–±—Ä–æ–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É"""
        try:
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª: {signal}")
            await self.send_log("üîÑ –û–±—Ä–æ–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
            balance = await self.get_balance_with_retry()
            if not balance or balance['sol_balance'] < MIN_SOL_BALANCE:
                await self.send_log(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É: {balance['sol_balance']} SOL")
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
            if not await self.verify_token_with_retry(signal['token_address']):
                await self.send_log("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ —î SPL —Ç–æ–∫–µ–Ω–æ–º")
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω
            token_info = await self.get_token_info(signal['token_address'])
            signal['token_name'] = token_info['name']
            signal['token_symbol'] = token_info['symbol']
            
            logger.info(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ —Ç–æ–∫–µ–Ω: {token_info}")
            await self.send_log(f"‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–∫–µ–Ω:\n‚Ä¢ –ù–∞–∑–≤–∞: {token_info['name']}\n‚Ä¢ –°–∏–º–≤–æ–ª: {token_info['symbol']}")
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (5% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É SOL)
            purchase_amount = balance['sol_balance'] * Decimal('0.05')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è
            logger.info(f"–ó–∞–ø–∏—Ç –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è {purchase_amount} SOL")
            await self.send_log(f"üí± –ó–∞–ø–∏—Ç –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è {purchase_amount:.4f} SOL")
            
            quote = await self.jupiter.get_quote(
                signal['token_address'],
                float(purchase_amount),
                slippage=1  # 1% slippage
            )
            
            if not quote:
                await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è")
                return
            
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è: {quote}")
            await self.send_log(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è:\n‚Ä¢ –¶—ñ–Ω–∞: {quote['price']:.6f} SOL\n‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quote['out_amount']:.6f}")
            
            # –í–∏–∫–æ–Ω—ÉÔøΩÔøΩ–º–æ —Å–≤–æ–ø
            tx = await self.jupiter.swap(quote)
            if not tx:
                await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —Å–≤–æ–ø")
                return
            
            logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx['signature']}")
            await self.send_log(f"üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx['signature']}")
            
            # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            self.db.add_transaction({
                'signature': tx['signature'],
                'token_address': signal['token_address'],
                'amount': quote['out_amount'],
                'type': 'buy',
                'status': 'pending',
                'balance_change': -float(purchase_amount)
            })
            
            # –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            status = await self.wait_for_transaction_confirmation(tx['signature'])
            logger.info(f"–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {status}")
            await self.send_log(f"üìù –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {status}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            self.db.update_transaction(tx['signature'], {
                'status': status,
                'confirmations': tx.get('confirmations', 0)
            })
            
            if status == 'confirmed':
                # –î–æ–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
                position_data = {
                    'token_address': signal['token_address'],
                    'token_symbol': signal['token_symbol'],
                    'entry_price': quote['price'],
                    'current_price': quote['price'],
                    'amount': quote['out_amount'],
                    'remaining_amount': quote['out_amount'],
                    'status': 'open',
                    'transaction_signature': tx['signature']
                }
                position_id = self.db.add_position(position_data)
                
                # –î–æ–¥–∞—î–º–æ —Ç–æ—Ä–≥–æ–≤—É –æ–ø–µ—Ä–∞—Ü—ñ—é
                trade_data = {
                    'token_address': signal['token_address'],
                    'token_name': signal['token_name'],
                    'entry_price': quote['price'],
                    'amount': quote['out_amount'],
                    'type': 'buy',
                    'status': 'open',
                    'position_id': position_id
                }
                self.db.add_trade(trade_data)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
                self.update_performance_metrics(True, time.time())
                
                await self.send_log(
                    f"‚úÖ –£—Å–ø—ñ—à–Ω–∞ –ø–æ–∫—É–ø–∫–∞:\n"
                    f"‚Ä¢ –¢–æ–∫–µ–Ω: {signal['token_name']} ({signal['token_symbol']})\n"
                    f"‚Ä¢ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {purchase_amount:.4f} SOL\n"
                    f"‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–æ: {quote['out_amount']:.6f} —Ç–æ–∫–µ–Ω—ñ–≤\n"
                    f"‚Ä¢ –¶—ñ–Ω–∞: {quote['price']:.6f} SOL\n"
                    f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è: https://solscan.io/tx/{tx['signature']}"
                )
                
            else:
                # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –Ω–µ–≤–¥–∞—á—ñ
                self.update_performance_metrics(False, time.time())
                await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {status}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É: {e}", exc_info=True)
            await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            self.db.add_log({
                'level': 'ERROR',
                'message': f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É –¥–ª—è {signal.get('token_name', 'Unknown')}",
                'details': str(e),
                'session_id': self.current_session_id
            })

    async def show_balance_positions(self, event):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —ñ –ø–æ–∑–∏—Ü—ñ–π"""
        try:
            await self.send_log(f"üí∞ –ó–∞–ø–∏—Ç –±–∞–ª–∞–Ω—Å—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {event.sender_id}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π
            balance_data = await self.trading_executor.get_positions_balance()
            
            message = ["üí∞ –ë–∞–ª–∞–Ω—Å —ñ –ø–æ–∑–∏—Ü—ñ—ó:\n"]
            message.append(f"üíé –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance_data['total_balance_sol']:.4f} SOL\n")
            
            if balance_data['positions']:
                message.append("üìä –í—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó:")
                for pos in balance_data['positions']:
                    message.append(
                        f"\n‚Ä¢ {pos['token_name']} ({pos['token_address'][:8]}...):"
                        f"\n  –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {pos['amount']:.4f}"
                        f"\n  –¶—ñ–Ω–∞: {pos['current_price']:.8f} SOL"
                        f"\n  –í–∞—Ä—Ç—ñ—Å—Ç—å: {pos['value_sol']:.4f} SOL"
                    )
            else:
                message.append("\nüì≠ –ù–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
            
            await event.edit("\n".join(message), buttons=[
                [Button.inline("üîÑ –û–Ω–æ–≤–∏—Ç–∏", b"balance_positions")],
                [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"main_menu")]
            ])
            
            await self.send_log(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {event.sender_id}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {str(e)}")
            await event.edit("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É", buttons=[
                [Button.inline("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", b"balance_positions")],
                [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"main_menu")]
            ])
            await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {event.sender_id}: {str(e)}")

    async def send_log(self, message: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª –ª–æ–≥—ñ–≤"""
        try:
            if self.monitor_channel:
                await self.bot_client.send_message(self.monitor_channel, message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ÔøΩÔøΩ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—É: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–Ω–æ–Ω–Ω—è
        load_dotenv()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        api_id = int(os.getenv('API_ID'))
        api_hash = os.getenv('API_HASH')
        bot_token = os.getenv('BOT_TOKEN')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = TradingBot(api_id, api_hash, bot_token)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await bot.start()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç
    asyncio.run(main())