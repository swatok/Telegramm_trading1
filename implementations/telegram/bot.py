"""Telegram bot implementation"""

from typing import Dict, Optional
from decimal import Decimal
from datetime import datetime, timedelta

from interfaces.telegram_interfaces import ITelegramBot
from implementations.trading_service import TradingService
from implementations.monitor_service import MonitorService

class TelegramBot(ITelegramBot):
    """–Ü–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self._trading_service = TradingService()
        self._monitor_service = MonitorService()
        self._user_states: Dict[int, Dict] = {}  # user_id -> state
    
    async def handle_command(self, user_id: int, command: str, params: Dict) -> str:
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            if command == 'market_buy':
                return await self._handle_market_buy(user_id, params)
            elif command == 'market_sell':
                return await self._handle_market_sell(user_id, params)
            elif command == 'limit_buy':
                return await self._handle_limit_buy(user_id, params)
            elif command == 'limit_sell':
                return await self._handle_limit_sell(user_id, params)
            elif command == 'cancel_order':
                return await self._handle_cancel_order(user_id, params)
            elif command == 'orders':
                return await self._handle_orders(user_id, params)
            elif command == 'market_info':
                return await self._handle_market_info(user_id, params)
            elif command == 'set_alert':
                return await self._handle_set_alert(user_id, params)
            else:
                return "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
    
    async def _handle_market_buy(self, user_id: int, params: Dict) -> str:
        """–û–±—Ä–æ–±–∫–∞ —Ä–∏–Ω–∫–æ–≤–æ—ó –ø–æ–∫—É–ø–∫–∏"""
        token_address = params.get('token')
        amount = Decimal(str(params.get('amount')))
        max_slippage = Decimal(str(params.get('slippage', '1.0')))
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ü—ñ–Ω–∫—É
        estimate = await self._trading_service.estimate_trade(
            token_address=token_address,
            amount=amount,
            side='buy'
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Ä–¥–µ—Ä
        order = await self._trading_service.create_market_order(
            token_address=token_address,
            amount=amount,
            side='buy',
            max_slippage=max_slippage
        )
        
        if order.status == 'filled':
            return (
                f"‚úÖ –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ\n"
                f"–¶—ñ–Ω–∞: {order.filled_price}\n"
                f"–û–±'—î–º: {order.amount}\n"
                f"–ö–æ–º—ñ—Å—ñ—è: {estimate['gas_cost'] + estimate['dex_fee']}"
            )
        else:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—É: {order.error}"
    
    async def _handle_market_sell(self, user_id: int, params: Dict) -> str:
        """–û–±—Ä–æ–±–∫–∞ —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–∂—É"""
        token_address = params.get('token')
        amount = Decimal(str(params.get('amount')))
        max_slippage = Decimal(str(params.get('slippage', '1.0')))
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ü—ñ–Ω–∫—É
        estimate = await self._trading_service.estimate_trade(
            token_address=token_address,
            amount=amount,
            side='sell'
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Ä–¥–µ—Ä
        order = await self._trading_service.create_market_order(
            token_address=token_address,
            amount=amount,
            side='sell',
            max_slippage=max_slippage
        )
        
        if order.status == 'filled':
            return (
                f"‚úÖ –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ\n"
                f"–¶—ñ–Ω–∞: {order.filled_price}\n"
                f"–û–±'—î–º: {order.amount}\n"
                f"–ö–æ–º—ñ—Å—ñ—è: {estimate['gas_cost'] + estimate['dex_fee']}"
            )
        else:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—É: {order.error}"
    
    async def _handle_limit_buy(self, user_id: int, params: Dict) -> str:
        """–û–±—Ä–æ–±–∫–∞ –ª—ñ–º—ñ—Ç–Ω–æ—ó –ø–æ–∫—É–ø–∫–∏"""
        token_address = params.get('token')
        amount = Decimal(str(params.get('amount')))
        price = Decimal(str(params.get('price')))
        
        order = await self._trading_service.create_limit_order(
            token_address=token_address,
            amount=amount,
            price=price,
            side='buy'
        )
        
        if order:
            return (
                f"‚úÖ –õ—ñ–º—ñ—Ç–Ω–∏–π –æ—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ\n"
                f"–¶—ñ–Ω–∞: {order.price}\n"
                f"–û–±'—î–º: {order.amount}"
            )
        else:
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É"
    
    async def _handle_limit_sell(self, user_id: int, params: Dict) -> str:
        """–û–±—Ä–æ–±–∫–∞ –ª—ñ–º—ñ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–∂—É"""
        token_address = params.get('token')
        amount = Decimal(str(params.get('amount')))
        price = Decimal(str(params.get('price')))
        
        order = await self._trading_service.create_limit_order(
            token_address=token_address,
            amount=amount,
            price=price,
            side='sell'
        )
        
        if order:
            return (
                f"‚úÖ –õ—ñ–º—ñ—Ç–Ω–∏–π –æ—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ\n"
                f"–¶—ñ–Ω–∞: {order.price}\n"
                f"–û–±'—î–º: {order.amount}"
            )
        else:
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É"
    
    async def _handle_cancel_order(self, user_id: int, params: Dict) -> str:
        """–û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—É"""
        order_id = params.get('order_id')
        
        success = await self._trading_service.cancel_order(order_id)
        if success:
            return "‚úÖ –û—Ä–¥–µ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
        else:
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—É"
    
    async def _handle_orders(self, user_id: int, params: Dict) -> str:
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É —Å–ø–∏—Å–∫—É –æ—Ä–¥–µ—Ä—ñ–≤"""
        active_orders = await self._trading_service.get_active_orders()
        
        if not active_orders:
            return "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤"
            
        result = "üìã –ê–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏:\n\n"
        for order in active_orders:
            result += (
                f"{'üü¢ –ö—É–ø—ñ–≤–ª—è' if order.side == 'buy' else 'üî¥ –ü—Ä–æ–¥–∞–∂'}\n"
                f"–¶—ñ–Ω–∞: {order.price}\n"
                f"–û–±'—î–º: {order.amount}\n"
                f"–°—Ç–∞—Ç—É—Å: {order.status}\n\n"
            )
        return result
    
    async def _handle_market_info(self, user_id: int, params: Dict) -> str:
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–∏–Ω–æ–∫"""
        token_address = params.get('token')
        
        summary = await self._monitor_service.get_market_summary(token_address)
        
        return (
            f"üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–∏–Ω–æ–∫:\n\n"
            f"–¶—ñ–Ω–∞: {summary['price']}\n"
            f"–ó–º—ñ–Ω–∞: {summary['price_change']}%\n"
            f"–û–±'—î–º: {summary['volume']}\n"
            f"–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {summary['volatility']}%\n"
            f"–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: {summary['liquidity']}"
        )
    
    async def _handle_set_alert(self, user_id: int, params: Dict) -> str:
        """–û–±—Ä–æ–±–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç—É"""
        token_address = params.get('token')
        price = Decimal(str(params.get('price')))
        direction = params.get('direction', 'above')
        
        async def alert_callback(token: str, current_price: Decimal):
            # TODO: –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —á–µ—Ä–µ–∑ Telegram
            pass
        
        await self._monitor_service.monitor_price(
            token_address=token_address,
            target_price=price,
            direction=direction,
            callback=alert_callback
        )
        
        return (
            f"‚ö°Ô∏è –ê–ª–µ—Ä—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
            f"–¶—ñ–Ω–∞: {price}\n"
            f"–ù–∞–ø—Ä—è–º–æ–∫: {'–≤–∏—â–µ' if direction == 'above' else '–Ω–∏–∂—á–µ'}"
        ) 