from typing import Dict, Any, Optional, Callable, List
import asyncio
from datetime import datetime
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from interfaces.telegram_interfaces import BaseTelegramInterface

class BaseTelegramImplementation(BaseTelegramInterface):
    """–ë–∞–∑–æ–≤–∞ —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–ª—è Telegram –±–æ—Ç—ñ–≤"""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        self.config = {}
        self.bot = None
        self.application = None
        self.commands = {}
        self.message_handlers = []
        self.error_handlers = []
        
    async def initialize(self, config: Dict[str, Any]) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        try:
            self.config = config
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
            self.bot = Bot(token=config['telegram_token'])
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫
            self.application = Application.builder().token(config['telegram_token']).build()
            
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –±–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
            self._register_base_commands()
            
            return True
            
        except Exception as e:
            print(f"Error initializing Telegram bot: {e}")
            return False
            
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            if not self.application:
                return False
                
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.run_polling()
            
            return True
            
        except Exception as e:
            print(f"Error starting Telegram bot: {e}")
            return False
            
    async def stop(self) -> bool:
        """–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞"""
        try:
            if self.application:
                await self.application.stop()
                await self.application.shutdown()
            return True
            
        except Exception as e:
            print(f"Error stopping Telegram bot: {e}")
            return False
            
    def add_command(self, command: str, handler: Callable, description: str) -> None:
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏"""
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É
            self.commands[command] = {
                'handler': handler,
                'description': description
            }
            
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏
            self.application.add_handler(
                CommandHandler(command, handler)
            )
            
        except Exception as e:
            print(f"Error adding command: {e}")
            
    def add_message_handler(self, handler: Callable) -> None:
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
            self.message_handlers.append(handler)
            
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            self.application.add_handler(
                MessageHandler(filters.TEXT & ~filters.COMMAND, handler)
            )
            
        except Exception as e:
            print(f"Error adding message handler: {e}")
            
    def add_error_handler(self, handler: Callable) -> None:
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
            self.error_handlers.append(handler)
            
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
            self.application.add_error_handler(handler)
            
        except Exception as e:
            print(f"Error adding error handler: {e}")
            
    async def send_message(self, chat_id: int, text: str,
                          parse_mode: Optional[str] = None) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode
            )
            return True
            
        except Exception as e:
            print(f"Error sending message: {e}")
            return False
            
    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
        try:
            welcome_message = (
                "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –Ω–∞ Solana.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            )
            
            for command, info in self.commands.items():
                welcome_message += f"/{command} - {info['description']}\n"
                
            await update.message.reply_text(welcome_message)
            
        except Exception as e:
            print(f"Error handling start command: {e}")
            
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
        try:
            help_message = "üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
            
            for command, info in self.commands.items():
                help_message += f"/{command} - {info['description']}\n"
                
            await update.message.reply_text(help_message)
            
        except Exception as e:
            print(f"Error handling help command: {e}")
            
    def _register_base_commands(self) -> None:
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥"""
        self.add_command('start', self._start_command, '–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º')
        self.add_command('help', self._help_command, '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥') 