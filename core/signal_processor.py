"""–ü—Ä–æ—Ü–µ—Å–æ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—ñ–≤"""

from typing import Optional, Dict, Any
import asyncio
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest

from utils import get_logger, measure_time
from utils.decorators import log_execution
from .notification_manager import NotificationManager
from .config_manager import ConfigManager
from .repository_factory import RepositoryFactory

logger = get_logger("signal_processor")

class SignalProcessor:
    def __init__(
        self,
        notification_manager: NotificationManager,
        monitor_client: TelegramClient,
        db_file: str = 'trading_bot.db'
    ):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤
        
        Args:
            notification_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ–≤—ñ—â–µ–Ω—å
            monitor_client: –ö–ª—ñ—î–Ω—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫–∞–Ω–∞–ª—ñ–≤
            db_file: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        """
        self.notification_manager = notification_manager
        self.monitor_client = monitor_client
        self.config = ConfigManager()
        self._shutdown_flag = False
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó
        self.repos = RepositoryFactory(db_file)
        
    @measure_time
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫–∞–Ω–∞–ª—ñ–≤"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
            channels = self.repos.channel_repository.get_active_channels()
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(channels)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
            
            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
            for channel in channels:
                await self._join_channel(channel['username'])
            
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            @self.monitor_client.on(events.NewMessage)
            async def message_handler(event):
                if self._shutdown_flag:
                    return
                    
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
                    channel_name = event.chat.username or event.chat.title
                    channel = self.repos.channel_repository.get_channel_by_username(channel_name)
                    if not channel or not channel['is_active']:
                        return
                        
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    await self._process_message(event, channel['id'])
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                    await self.notification_manager.send_error_notification(
                        str(e),
                        "MessageProcessingError",
                        {"channel": channel_name}
                    )
            
            logger.info("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            await self.notification_manager.send_error_notification(
                str(e),
                "MonitoringStartError"
            )
            raise
            
    async def stop_monitoring(self):
        """–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        self._shutdown_flag = True
        self.repos.close_all()
        logger.info("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–æ")
        
    @log_execution
    async def _join_channel(self, channel_name: str):
        """
        –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É
        
        Args:
            channel_name: –ù–∞–∑–≤–∞ –∫–∞–Ω–∞–ª—É
        """
        try:
            channel = await self.monitor_client.get_entity(channel_name)
            await self.monitor_client(JoinChannelRequest(channel))
            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É {channel_name}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É {channel_name}: {e}")
            await self.notification_manager.send_error_notification(
                str(e),
                "ChannelJoinError",
                {"channel": channel_name}
            )
            
    @log_execution
    async def _leave_channel(self, channel_name: str):
        """
        –í–∏—Ö—ñ–¥ –∑ –∫–∞–Ω–∞–ª—É
        
        Args:
            channel_name: –ù–∞–∑–≤–∞ –∫–∞–Ω–∞–ª—É
        """
        try:
            channel = await self.monitor_client.get_entity(channel_name)
            await self.monitor_client(LeaveChannelRequest(channel))
            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –ø–æ–∫–∏–Ω—É—Ç–æ –∫–∞–Ω–∞–ª {channel_name}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –∫–∞–Ω–∞–ª—É {channel_name}: {e}")
            
    @measure_time
    async def _process_message(self, event, channel_id: int):
        """
        –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
        
        Args:
            event: –ü–æ–¥—ñ—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            channel_id: ID –∫–∞–Ω–∞–ª—É
        """
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_text = event.message.text
            message_id = event.message.id
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
            existing_signal = self.repos.signal_repository.get_signal(message_id, channel_id)
            if existing_signal:
                logger.debug(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
                return
            
            # –ü–∞—Ä—Å–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            from message_parser import MessageParser
            signal_data = MessageParser.parse_message(message_text)
            
            if not signal_data:
                logger.debug("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É")
                return
                
            # –í–∞–ª—ñ–¥—É—î–º–æ –¥–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª—É
            if not self._validate_signal(signal_data):
                logger.warning("–°–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ–π—à–æ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é")
                return
                
            # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–∞–Ω–∞–ª —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            signal_data.update({
                'message_id': message_id,
                'channel_id': channel_id,
                'status': 'received',
                'timestamp': datetime.now()
            })
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            signal_id = self.repos.signal_repository.add_signal(signal_data)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª
            await self.notification_manager.send_notification(
                f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª\n\n"
                f"–¢–æ–∫–µ–Ω: {signal_data['token_symbol']}\n"
                f"–¢–∏–ø: {signal_data['signal_type']}\n"
                f"–¶—ñ–Ω–∞: {signal_data['price']}"
            )
            
            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª {signal_id}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await self.notification_manager.send_error_notification(
                str(e),
                "SignalProcessingError"
            )
            
    def _validate_signal(self, signal_data: Dict[str, Any]) -> bool:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—É
        
        Args:
            signal_data: –î–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª—É
            
        Returns:
            bool: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        """
        required_fields = ['token_symbol', 'signal_type', 'price']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if not all(field in signal_data for field in required_fields):
            logger.warning(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤ —Å–∏–≥–Ω–∞–ª—ñ: {required_fields}")
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª—É
        if signal_data['signal_type'] not in ['BUY', 'SELL']:
            logger.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª—É: {signal_data['signal_type']}")
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ü—ñ–Ω—É
        try:
            price = float(signal_data['price'])
            if price <= 0:
                logger.warning(f"–ù–µ–≤—ñ—Ä–Ω–∞ —Ü—ñ–Ω–∞ –≤ —Å–∏–≥–Ω–∞–ª—ñ: {price}")
                return False
        except (ValueError, TypeError):
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ü—ñ–Ω–∏: {signal_data['price']}")
            return False
            
        return True
