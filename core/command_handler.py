"""–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

from typing import Optional, Dict, Any
import asyncio
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.types import Message

from utils import get_logger, measure_time
from utils.decorators import admin_only, log_execution
from .notification_manager import NotificationManager
from .config_manager import ConfigManager
from .repository_factory import RepositoryFactory

logger = get_logger("command_handler")

class CommandHandler:
    def __init__(
        self,
        notification_manager: NotificationManager,
        bot_client: TelegramClient,
        db_file: str = 'trading_bot.db'
    ):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥
        
        Args:
            notification_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ–≤—ñ—â–µ–Ω—å
            bot_client: –ö–ª—ñ—î–Ω—Ç –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            db_file: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        """
        self.notification_manager = notification_manager
        self.bot_client = bot_client
        self.config = ConfigManager()
        self._shutdown_flag = False
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó
        self.repos = RepositoryFactory(db_file)
        
    async def start_handling(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥"""
        try:
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥
            @self.bot_client.on(events.NewMessage(pattern=r'/[a-zA-Z]+'))
            async def command_handler(event):
                if self._shutdown_flag:
                    return
                    
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if not await self._is_admin(event.sender_id):
                        await event.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏")
                        return
                        
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É
                    await self._process_command(event)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏: {e}")
                    await self.notification_manager.send_error_notification(
                        str(e),
                        "CommandProcessingError"
                    )
            
            logger.info("–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            await self.notification_manager.send_error_notification(
                str(e),
                "CommandHandlingStartError"
            )
            raise
            
    async def stop_handling(self):
        """–ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥"""
        self._shutdown_flag = True
        self.repos.close_all()
        logger.info("–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∑—É–ø–∏–Ω–µ–Ω–∞")
        
    @admin_only
    async def _process_command(self, event: Message):
        """
        –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏
        
        Args:
            event: –ü–æ–¥—ñ—è –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏
        """
        try:
            command = event.message.text.split()[0].lower()
            args = event.message.text.split()[1:]
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏
            handlers = {
                '/start': self._handle_start,
                '/help': self._handle_help,
                '/status': self._handle_status,
                '/balance': self._handle_balance,
                '/positions': self._handle_positions,
                '/channels': self._handle_channels,
                '/add_channel': self._handle_add_channel,
                '/remove_channel': self._handle_remove_channel,
                '/settings': self._handle_settings,
                '/update_setting': self._handle_update_setting,
                '/stop': self._handle_stop
            }
            
            handler = handlers.get(command)
            if not handler:
                await event.reply(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {command}\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥")
                return
                
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
            await handler(event, args)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ {command}: {e}")
            await event.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏")
            await self.notification_manager.send_error_notification(
                str(e),
                "CommandExecutionError",
                {"command": command}
            )
            
    async def _is_admin(self, user_id: int) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            bool: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        """
        admin_ids = self.config.get('ADMIN_IDS', [])
        return user_id in admin_ids
        
    @log_execution
    async def _handle_start(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        await event.reply(
            "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ –Ω–∞ Solana.\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
        )
        
    @log_execution
    async def _handle_help(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
        help_text = (
            "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
            "/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n"
            "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/balance - –ë–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è\n"
            "/positions - –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó\n"
            "/channels - –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤\n"
            "/add_channel - –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª\n"
            "/remove_channel - –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª\n"
            "/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
            "/update_setting - –û–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
            "/stop - –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞"
        )
        await event.reply(help_text)
        
    @log_execution
    async def _handle_status(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /status"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.repos.stats_repository.get_trading_stats()
            
            status_text = (
                "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
                f"–ê–∫—Ç–∏–≤–Ω–∏–π —á–∞—Å: {stats['uptime']}\n"
                f"–û–±—Ä–æ–±–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {stats['signals_processed']}\n"
                f"–í—ñ–¥–∫—Ä–∏—Ç–æ –ø–æ–∑–∏—Ü—ñ–π: {stats['positions_opened']}\n"
                f"–ó–∞–∫—Ä–∏—Ç–æ –ø–æ–∑–∏—Ü—ñ–π: {stats['positions_closed']}\n"
                f"–ü—Ä–∏–±—É—Ç–æ–∫: {stats['total_profit']} SOL\n"
                f"Win rate: {stats['win_rate']}%"
            )
            await event.reply(status_text)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
            await event.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É")
            
    @log_execution
    async def _handle_balance(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /balance"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å
            balance = self.repos.stats_repository.get_wallet_balance()
            
            balance_text = (
                "üí∞ –ë–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è:\n\n"
                f"SOL: {balance['sol']}\n"
                f"USDC: {balance['usdc']}\n"
                f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${balance['total_usd']}"
            )
            await event.reply(balance_text)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
            await event.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É")
            
    @log_execution
    async def _handle_positions(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /positions"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
            positions = self.repos.position_repository.get_open_positions()
            
            if not positions:
                await event.reply("üìä –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
                return
                
            positions_text = "üìä –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:\n\n"
            for pos in positions:
                positions_text += (
                    f"ID: {pos['id']}\n"
                    f"–¢–æ–∫–µ–Ω: {pos['token_symbol']}\n"
                    f"–¢–∏–ø: {pos['position_type']}\n"
                    f"–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {pos['entry_price']}\n"
                    f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {pos['current_price']}\n"
                    f"P&L: {pos['pnl']}%\n\n"
                )
            await event.reply(positions_text)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
            await event.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π")
            
    @log_execution
    async def _handle_channels(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /channels"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤
            channels = self.repos.channel_repository.get_all_channels()
            
            if not channels:
                await event.reply("üì¢ –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤")
                return
                
            channels_text = "üì¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω—ñ –∫–∞–Ω–∞–ª–∏:\n\n"
            for channel in channels:
                channels_text += (
                    f"ID: {channel['id']}\n"
                    f"–ù–∞–∑–≤–∞: {channel['name']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π' if channel['is_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}\n\n"
                )
            await event.reply(channels_text)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤: {e}")
            await event.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤")
            
    @log_execution
    async def _handle_add_channel(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /add_channel"""
        if not args:
            await event.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É")
            return
            
        channel_name = args[0]
        try:
            # –î–æ–¥–∞—î–º–æ –∫–∞–Ω–∞–ª
            self.repos.channel_repository.add_channel({
                'name': channel_name,
                'username': channel_name,
                'type': 'trading',
                'is_active': True
            })
            
            await event.reply(f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É: {e}")
            await event.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É")
            
    @log_execution
    async def _handle_remove_channel(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /remove_channel"""
        if not args:
            await event.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É")
            return
            
        try:
            channel_id = int(args[0])
            # –í–∏–¥–∞–ª—è—î–º–æ –∫–∞–Ω–∞–ª
            self.repos.channel_repository.delete_channel(channel_id)
            
            await event.reply(f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
            
        except ValueError:
            await event.reply("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª—É")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É: {e}")
            await event.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É")
            
    @log_execution
    async def _handle_settings(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /settings"""
        settings = self.config.all_config
        
        settings_text = "‚öôÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n"
        for section, values in settings.items():
            settings_text += f"{section}:\n"
            for key, value in values.items():
                settings_text += f"  {key}: {value}\n"
            settings_text += "\n"
            
        await event.reply(settings_text)
        
    @log_execution
    async def _handle_update_setting(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /update_setting"""
        if len(args) < 2:
            await event.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å –∫–ª—é—á —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            return
            
        key = args[0]
        value = args[1]
        
        try:
            self.config.set(key, value)
            await event.reply(f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {key} –æ–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {e}")
            await event.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            
    @log_execution
    async def _handle_stop(self, event: Message, args: list):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /stop"""
        await event.reply("üõë –ó—É–ø–∏–Ω—è—é –±–æ—Ç–∞...")
        self._shutdown_flag = True
