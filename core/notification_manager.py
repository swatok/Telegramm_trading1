from typing import Optional, Dict, Any
import asyncio
from datetime import datetime
from telethon import TelegramClient

from utils import get_logger
from utils.decorators import log_execution
from .config_manager import ConfigManager

logger = get_logger("notification_manager")

class NotificationManager:
    def __init__(
        self,
        bot_client: TelegramClient,
        config_manager: ConfigManager
    ):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å
        
        Args:
            bot_client: –ö–ª—ñ—î–Ω—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        """
        self.bot_client = bot_client
        self.config = config_manager
        
    @log_execution
    async def send_notification(
        self,
        message: str,
        notification_type: str = "info",
        data: Optional[Dict[str, Any]] = None
    ):
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            notification_type: –¢–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (info, warning, error)
            data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        """
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_id = self.config.get('ADMIN_ID')
            if not admin_id:
                logger.error("–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
                
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            formatted_message = self._format_message(message, notification_type, data)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            await self.bot_client.send_message(admin_id, formatted_message)
            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∏–ø—É {notification_type}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
            
    @log_execution
    async def send_error_notification(
        self,
        error_message: str,
        error_type: str,
        data: Optional[Dict[str, Any]] = None
    ):
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        
        Args:
            error_message: –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
            error_type: –¢–∏–ø –ø–æ–º–∏–ª–∫–∏
            data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        """
        try:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            message = (
                f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error_type}\n"
                f"üìù –û–ø–∏—Å: {error_message}\n"
            )
            
            if data:
                message += "\nüîç –î–µ—Ç–∞–ª—ñ:\n"
                for key, value in data.items():
                    message += f"{key}: {value}\n"
                    
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            await self.send_notification(message, "error", data)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")
            
    @log_execution
    async def send_trade_notification(
        self,
        trade_type: str,
        token_symbol: str,
        price: float,
        amount: float,
        data: Optional[Dict[str, Any]] = None
    ):
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ—Ä–≥—ñ–≤–ª—é
        
        Args:
            trade_type: –¢–∏–ø —Ç–æ—Ä–≥—ñ–≤–ª—ñ (buy/sell)
            token_symbol: –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            price: –¶—ñ–Ω–∞
            amount: –ö—ñ–ª—å–∫—ñ—Å—Ç—å
            data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        """
        try:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ—Ä–≥—ñ–≤–ª—é
            emoji = "üü¢" if trade_type.lower() == "buy" else "üî¥"
            message = (
                f"{emoji} {trade_type.upper()}\n\n"
                f"–¢–æ–∫–µ–Ω: {token_symbol}\n"
                f"–¶—ñ–Ω–∞: {price}\n"
                f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount}\n"
            )
            
            if data:
                message += "\nüìä –î–µ—Ç–∞–ª—ñ:\n"
                for key, value in data.items():
                    message += f"{key}: {value}\n"
                    
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            await self.send_notification(message, "trade", data)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ—Ä–≥—ñ–≤–ª—é: {e}")
            
    @log_execution
    async def send_position_notification(
        self,
        position_id: int,
        token_symbol: str,
        position_type: str,
        entry_price: float,
        current_price: float,
        pnl: float,
        data: Optional[Dict[str, Any]] = None
    ):
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—é
        
        Args:
            position_id: ID –ø–æ–∑–∏—Ü—ñ—ó
            token_symbol: –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            position_type: –¢–∏–ø –ø–æ–∑–∏—Ü—ñ—ó
            entry_price: –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É
            current_price: –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞
            pnl: –ü—Ä–∏–±—É—Ç–æ–∫/–∑–±–∏—Ç–æ–∫
            data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        """
        try:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—é
            emoji = "üìà" if pnl >= 0 else "üìâ"
            message = (
                f"{emoji} –ü–æ–∑–∏—Ü—ñ—è #{position_id}\n\n"
                f"–¢–æ–∫–µ–Ω: {token_symbol}\n"
                f"–¢–∏–ø: {position_type}\n"
                f"–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {entry_price}\n"
                f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price}\n"
                f"P&L: {pnl}%\n"
            )
            
            if data:
                message += "\nüìä –î–µ—Ç–∞–ª—ñ:\n"
                for key, value in data.items():
                    message += f"{key}: {value}\n"
                    
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            await self.send_notification(message, "position", data)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—é: {e}")
            
    @log_execution
    async def send_system_notification(
        self,
        event_type: str,
        message: str,
        data: Optional[Dict[str, Any]] = None
    ):
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        
        Args:
            event_type: –¢–∏–ø –ø–æ–¥—ñ—ó
            message: –¢–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        """
        try:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            formatted_message = (
                f"üîß –°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–¥—ñ—è: {event_type}\n\n"
                f"{message}\n"
            )
            
            if data:
                formatted_message += "\nüìä –î–µ—Ç–∞–ª—ñ:\n"
                for key, value in data.items():
                    formatted_message += f"{key}: {value}\n"
                    
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            await self.send_notification(formatted_message, "system", data)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
            
    def _format_message(
        self,
        message: str,
        notification_type: str,
        data: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        
        Args:
            message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            notification_type: –¢–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
            
        Returns:
            str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        # –î–æ–¥–∞—î–º–æ —á–∞—Å–æ–≤—É –º—ñ—Ç–∫—É
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –µ–º–æ–¥–∑—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
        type_emoji = {
            "info": "‚ÑπÔ∏è",
            "warning": "‚ö†Ô∏è",
            "error": "‚ùå",
            "trade": "üí±",
            "position": "üìä",
            "system": "üîß"
        }.get(notification_type, "üìù")
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        formatted_message = (
            f"{type_emoji} {message}\n\n"
            f"üïí {timestamp}"
        )
        
        return formatted_message
