"""
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏.
"""

from typing import Dict, List, Optional
from datetime import datetime, timedelta
import asyncio
from decimal import Decimal

from utils.logger import setup_logger
from .performance_metrics import PerformanceMetrics
from core.notification_manager import NotificationManager

logger = setup_logger(__name__)

class PerformanceMonitor:
    """
    –ö–ª–∞—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.
    –í—ñ–¥—Å—Ç–µ–∂—É—î –º–µ—Ç—Ä–∏–∫–∏ —Ç–∞ –≥–µ–Ω–µ—Ä—É—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ –ø–æ—Ä–æ–≥–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
    """

    def __init__(
        self,
        metrics: PerformanceMetrics,
        notification_manager: NotificationManager,
        check_interval: int = 60
    ):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.

        Args:
            metrics: –û–±'—î–∫—Ç –¥–ª—è –∑–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫
            notification_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ–≤—ñ—â–µ–Ω—å
            check_interval: –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.metrics = metrics
        self.notification_manager = notification_manager
        self.check_interval = check_interval
        self._monitoring_task = None
        self._is_running = False
        
        # –ü–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
        self.thresholds = {
            'error_rate': 0.1,  # 10% –ø–æ–º–∏–ª–æ–∫
            'api_response_time': 2.0,  # 2 —Å–µ–∫—É–Ω–¥–∏
            'trade_success_rate': 0.95,  # 95% —É—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥
            'consecutive_errors': 3  # 3 –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥—Ä—è–¥
        }
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º–µ—Ç—Ä–∏–∫."""
        if self._is_running:
            logger.warning("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
            
        self._is_running = True
        self._monitoring_task = asyncio.create_task(self._monitor_loop())
        logger.info("–ó–∞–ø—É—â–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
        
    async def stop_monitoring(self):
        """–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º–µ—Ç—Ä–∏–∫."""
        if not self._is_running:
            return
            
        self._is_running = False
        if self._monitoring_task:
            self._monitoring_task.cancel()
            try:
                await self._monitoring_task
            except asyncio.CancelledError:
                pass
        logger.info("–ó—É–ø–∏–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
        
    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."""
        while self._is_running:
            try:
                await self._check_metrics()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                
    async def _check_metrics(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å."""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫
        error_stats = self.metrics.get_error_stats()
        trade_stats = self.metrics.get_trade_stats()
        api_stats = self.metrics.get_api_stats()
        
        alerts = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—è –ø–æ–º–∏–ª–æ–∫
        if error_stats['total_errors'] > 0:
            error_rate = error_stats['total_errors'] / trade_stats['total_trades']
            if error_rate > self.thresholds['error_rate']:
                alerts.append(
                    f"‚ö†Ô∏è –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –ø–æ–º–∏–ª–æ–∫: {error_rate:.1%}"
                )
                
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
        for endpoint, stats in api_stats.items():
            if stats['average_time'] > self.thresholds['api_response_time']:
                alerts.append(
                    f"‚ö†Ô∏è –ü–æ–≤—ñ–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –¥–ª—è {endpoint}: "
                    f"{stats['average_time']:.2f}s"
                )
                
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ —É–≥–æ–¥
        if trade_stats['total_trades'] > 0:
            success_rate = trade_stats['success_rate']
            if success_rate < self.thresholds['trade_success_rate']:
                alerts.append(
                    f"‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å —É—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥: {success_rate:.1%}"
                )
                
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
        recent_errors = error_stats['recent_errors']
        if len(recent_errors) >= self.thresholds['consecutive_errors']:
            alerts.append(
                f"üî¥ –í–∏—è–≤–ª–µ–Ω–æ {len(recent_errors)} –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫"
            )
            
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å —è–∫—â–æ —î –ø—Ä–æ–±–ª–µ–º–∏
        if alerts:
            message = "üîç –ó–≤—ñ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:\n\n" + "\n".join(alerts)
            await self.notification_manager.send_notification(message)
            
    def update_thresholds(self, new_thresholds: Dict):
        """
        –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–≥–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å.
        
        Args:
            new_thresholds: –ù–æ–≤—ñ –ø–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        """
        self.thresholds.update(new_thresholds)
        logger.info("–û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
        
    async def generate_report(self) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑—ñ –∑–≤—ñ—Ç–æ–º
        """
        summary = self.metrics.get_performance_summary()
        hourly_stats = self.metrics.get_hourly_stats()
        
        report = {
            'summary': summary,
            'hourly_stats': hourly_stats,
            'thresholds': self.thresholds,
            'is_monitoring': self._is_running
        }
        
        return report 