"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –æ–±—Ä–æ–±–∫—É —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤.
"""

from decimal import Decimal
from typing import Dict, Optional
from datetime import datetime

from .constants import MIN_SOL_BALANCE, POSITION_SIZE_PERCENT
from .wallet_manager import WalletManager
from .price_monitor import PriceMonitor
from .token_validator import TokenValidator
from ..utils.logger import setup_logger

logger = setup_logger(__name__)

class TradeSignalHandler:
    """
    –ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤.
    –ö–æ–æ—Ä–¥–∏–Ω—É—î –ø—Ä–æ—Ü–µ—Å –æ–±—Ä–æ–±–∫–∏ —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤.
    """

    def __init__(
        self,
        wallet_manager: WalletManager,
        price_monitor: PriceMonitor,
        token_validator: TokenValidator,
        send_log_callback
    ):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤.

        Args:
            wallet_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –≥–∞–º–∞–Ω—Ü—è
            price_monitor: –ú–æ–Ω—ñ—Ç–æ—Ä —Ü—ñ–Ω
            token_validator: –í–∞–ª—ñ–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω—ñ–≤
            send_log_callback: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—ñ–≤
        """
        self.wallet_manager = wallet_manager
        self.price_monitor = price_monitor
        self.token_validator = token_validator
        self.send_log = send_log_callback

    async def handle_signal(self, signal: Dict) -> bool:
        """
        –û–±—Ä–æ–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É.

        Args:
            signal: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ —Å–∏–≥–Ω–∞–ª—É

        Returns:
            True —è–∫—â–æ —Å–∏–≥–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ, False —ñ–Ω–∞–∫—à–µ
        """
        try:
            logger.info(f"–ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —Å–∏–≥–Ω–∞–ª—É: {signal}")
            await self.send_log("üîÑ –û–±—Ä–æ–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É...")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
            balance_data = await self.wallet_manager.get_total_balance()
            if not balance_data:
                await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å")
                return False

            sol_balance = Decimal(str(balance_data['sol_balance']))
            logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance_data}")
            await self.send_log(f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {sol_balance:.4f} SOL (–í—Å—å–æ–≥–æ: {balance_data['total_value_sol']:.4f} SOL)")

            if sol_balance < MIN_SOL_BALANCE:
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SOL –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ. –ë–∞–ª–∞–Ω—Å: {sol_balance}")
                await self.send_log(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SOL –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ: {sol_balance}")
                return False

            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É
            token_address = signal.get('token_address')
            if not token_address:
                await self.send_log("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –∞–¥—Ä–µ—Å—É —Ç–æ–∫–µ–Ω—É")
                return False

            validation_result = await self.token_validator.validate_token(token_address)
            if not validation_result['valid']:
                await self.send_log(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ–π—à–æ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é: {validation_result['reason']}")
                return False

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω–∏ —Ç–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
            price_data = await self.price_monitor.get_current_price(token_address)
            if not price_data:
                await self.send_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω—É")
                return False

            if not self.price_monitor.has_sufficient_liquidity(token_address):
                await self.send_log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å")
                return False

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
            position_size = sol_balance * POSITION_SIZE_PERCENT
            if position_size <= MIN_SOL_BALANCE:
                await self.send_log("‚ùå –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π")
                return False

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
            success = await self._execute_trade(token_address, position_size, signal)
            if success:
                await self.send_log("‚úÖ –¢–æ—Ä–≥–æ–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                return True
            else:
                await self.send_log("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó")
                return False

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É: {e}")
            await self.send_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            return False

    async def _execute_trade(self, token_address: str, amount: Decimal, signal: Dict) -> bool:
        """
        –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó.

        Args:
            token_address: –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω—É
            amount: –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó
            signal: –î–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª—É

        Returns:
            True —è–∫—â–æ –æ–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, False —ñ–Ω–∞–∫—à–µ
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–Ω–æ—Å—Ç—ñ –±–∞–ª–∞–Ω—Å—É
            if not await self.wallet_manager.has_sufficient_balance(amount):
                logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó")
                return False

            # –û–±–≥–æ—Ä—Ç–∞–Ω–Ω—è SOL –≤ WSOL —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            tx_hash = await self.wallet_manager.wrap_sol(amount)
            if not tx_hash:
                logger.error("–ü–æ–º–∏–ª–∫–∞ –æ–±–≥–æ—Ä—Ç–∞–Ω–Ω—è SOL")
                return False

            # –¢—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ –º–µ—Ç–æ–¥—É –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–≤–æ–ø—É
            # –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó DEX API

            logger.info(f"–¢–æ—Ä–≥–æ–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ: {tx_hash}")
            return True

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó: {e}")
            return False

    async def validate_signal(self, signal: Dict) -> Dict[str, bool]:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É.

        Args:
            signal: –î–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª—É

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        """
        results = {
            'valid': True,
            'checks': {
                'has_token_address': False,
                'has_valid_token': False,
                'has_sufficient_balance': False,
                'has_sufficient_liquidity': False
            }
        }

        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω—É
            token_address = signal.get('token_address')
            results['checks']['has_token_address'] = bool(token_address)
            if not token_address:
                results['valid'] = False
                return results

            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É
            token_validation = await self.token_validator.validate_token(token_address)
            results['checks']['has_valid_token'] = token_validation['valid']
            if not token_validation['valid']:
                results['valid'] = False
                return results

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
            balance = await self.wallet_manager.get_balance()
            results['checks']['has_sufficient_balance'] = balance >= MIN_SOL_BALANCE
            if not results['checks']['has_sufficient_balance']:
                results['valid'] = False
                return results

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
            results['checks']['has_sufficient_liquidity'] = (
                self.price_monitor.has_sufficient_liquidity(token_address)
            )
            if not results['checks']['has_sufficient_liquidity']:
                results['valid'] = False
                return results

            return results

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É: {e}")
            results['valid'] = False
            return results 